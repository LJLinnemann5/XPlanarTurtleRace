<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Concept.Model</name>
    </assembly>
    <members>
        <member name="T:Concept.Model.ConceptLinkDiagnostic">
            <summary>
            Enum ConceptLinkDiagnostic
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptLinkDiagnostic.Ok">
            <summary>
            The <see cref="T:Concept.Model.ConceptLink"/> is valid
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptLinkDiagnostic.Information">
            <summary>
            The <see cref="T:Concept.Model.ConceptLink"/> is on information
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptLinkDiagnostic.Warning">
            <summary>
            The <see cref="T:Concept.Model.ConceptLink"/> is on warning
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptLinkDiagnostic.Error">
            <summary>
            The <see cref="T:Concept.Model.ConceptLink"/> is on error
            </summary>
        </member>
        <member name="T:Concept.Model.ConceptLink">
            <summary>
            Provides a simple way to connect ConceptElements together and keep this connection through time (starting/stopping application), by serializing the linked object(s) path(s).
            The ConceptLink uses a pattern called "Lazy Binding" (also known as lazy linking or on-demand symbol resolution) to resolve its paths.
            ConceptLink abstract class is the base class for <see cref="T:Concept.Model.ConceptSingleLink"/> and <see cref="T:Concept.Model.ConceptMultipleLink"/> classes.
            For more information on how to design and implement a model with Concept see <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DesigningAndImplementingAModel.html"/>
            </summary>
        </member>
        <member name="P:Concept.Model.ConceptLink.LinkedToElement">
            <summary>
            Indicates whether all the ConceptLinks should by default automatically update the link path(s) when the linked object(s) change.
            </summary>
            <value><c>true</c> if all ConceptLinks should be by default automatically updated; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Concept.Model.ConceptLink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptLink"/> class.
            </summary>
        </member>
        <member name="P:Concept.Model.ConceptLink.DisplayValue">
            <summary>
            Gets the display value. This value provides information about the linked element(s).
            </summary>
            <value>The display value.</value>
        </member>
        <member name="M:Concept.Model.ConceptLink.IsLinkedTo(Concept.Model.ConceptElement)">
            <summary>
            Determines whether this instance is linked to the specified <paramref name="reference"/>.
            </summary>
            <param name="reference">The item.</param>
            <returns><c>true</c> if this instance is linked to the specified item; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Concept.Model.ConceptLink.ElementLinked">
            <summary>
            Indicates whether the ConceptLink should automatically update the link path when the linked object changes.
            </summary>
            <value><c>true</c> if the ConceptLink path should be automatically updated; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Concept.Model.ConceptLink.CanAccept(Concept.Model.ConceptElement)">
            <summary>
            Determines whether this instance can accept the specified <paramref name="reference"/>.
            </summary>
            <param name="reference">The item.</param>
            <returns><c>true</c> if this instance can accept the specified item; otherwise, <c>false</c>.</returns>
        </member>
        <member name="F:Concept.Model.ConceptLink.LinkDiagnosticPropertyName">
            <summary>
            Identifies the <see cref="P:Concept.Model.ConceptLink.LinkDiagnostic"/> property. Useful when working with the <see cref="!:PropertyChanged"/> event.
            </summary>
        </member>
        <member name="P:Concept.Model.ConceptLink.LinkDiagnostic">
            <summary>
            Gets the link <see cref="T:Concept.Model.ConceptLinkDiagnostic">diagnostic</see>.
            </summary>
            <value>The link <see cref="T:Concept.Model.ConceptLinkDiagnostic">diagnostic</see>.</value>
        </member>
        <member name="P:Concept.Model.ConceptLink.DiagnosticText">
            <summary>
            Gets the diagnostic text. This text contains information about the state of this <see cref="T:Concept.Model.ConceptLink"/>.
            </summary>
            <value>The diagnostic text.</value>
        </member>
        <member name="P:Concept.Model.ConceptLink.ItemType">
            <summary>
            Gets the type of items that can be linked to this instance.
            </summary>
            <value>The type of the item.</value>
        </member>
        <member name="M:Concept.Model.ConceptLink.ReleaseReferences(System.Boolean)">
            <summary>
            Releases the references to all the linked objects.
            </summary>
            <param name="notifyLinkChanged"><c>true</c> to notify the link change; otherwise, <c>false</c>.</param>
        </member>
        <member name="F:Concept.Model.ConceptLink.EntryLinkPath">
            <summary>
            Constant string used as the tag to serialize the <see cref="P:Concept.Model.ConceptSingleLink.LinkPath"/> property.
            </summary>
        </member>
        <member name="P:Concept.Model.ConceptLink.Referentials">
            <summary>
            Gets or sets the referentials of this <see cref="T:Concept.Model.ConceptSingleLink"/>. 
            The referentials are the entry points to the different models. By default <see cref="P:Concept.Model.ConceptLink.Referentials"/> will contain the path to the current hierarchy this link is part of.
            This property can be modified to make links between separated hierarchical trees, more information about links can be found 
            <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DesigningAndImplementingAModel.html">here</see>.
            </summary>
            <value>The referentials.</value>
        </member>
        <member name="F:Concept.Model.ConceptLink.LinkChanged">
            <summary>
            This weak event occurs when the link reference changes
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptLink.BeforeLinkChanged">
            <summary>
            This weak event occurs just before the link reference changes
            </summary>
        </member>
        <member name="E:Concept.Model.ConceptLink.Filter">
            <summary>
            Occurs when <see cref="M:Concept.Model.ConceptLink.CanAccept(Concept.Model.ConceptElement)"/> is called. 
            Subscribe to this event and set <see cref="F:Concept.Utils.FilterEventArgs`1.Accept"/> to accept or not the <see cref="F:Concept.Utils.FilterEventArgs`1.Item"/> as link reference in the event handler.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptLink.LinkedItemPath(Concept.Model.ConceptElement)">
            <summary>
            Gets the path of the <paramref name="reference"/>. The path can be relative, if the item is in the same object tree as the link, or absolute.
            This method works with the Concept Repositories as root elements of trees. More information about links and hierarchical model can be found 
            <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DesigningAndImplementingAModel.html">here</see>.
            </summary>
            <param name="reference">The item.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:Concept.Model.ConceptLink.LinkableObjects">
            <summary>
            Gets the available objects for the link, application-wide.
            This method works with the Concept Repositories as root elements of trees. Available objects for the link are searched throughout these trees.
            More information about links and hierachical model can be found 
            <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DesigningAndImplementingAModel.html">here</see>.
            </summary>
            <value>The linkable objects.</value>
        </member>
        <member name="M:Concept.Model.ConceptLink.ResolveLink(System.String)">
            <summary>
            Resolves the <paramref name="linkPath"/> to find the corresponding ConceptElement object.
            </summary>
            <param name="linkPath">The link path.</param>
            <returns>The corresponding ConceptElement object, or null if not found.</returns>
        </member>
        <member name="M:Concept.Model.ConceptLink.RegisterReferenceIdentityChange(Concept.Model.ConceptElement,Concept.Model.ConceptElement)">
            <summary>
            Registers to the <paramref name="newReference"/> <see cref="F:Concept.Model.ConceptElement.IdentityChanged"/> event and unregisters from the <paramref name="oldReference"/>
            <see cref="F:Concept.Model.ConceptElement.IdentityChanged"/> event.
            </summary>
            <param name="newReference">The new reference</param>
            <param name="oldReference">The old reference</param>
        </member>
        <member name="M:Concept.Model.ConceptLink.UnRegisterReferenceIdentityChange(Concept.Model.ConceptElement)">
            <summary>
            Unregisters from the <paramref name="oldReference"/> <see cref="F:Concept.Model.ConceptElement.IdentityChanged"/> event.
            </summary>
            <param name="oldReference"></param>
        </member>
        <member name="M:Concept.Model.ConceptLink.ReferenceIdentityChange(Concept.Model.ConceptElement)">
            <summary>
            Method called when the <paramref name="reference"/>'s identity changed.
            </summary>
            <param name="reference">The reference whose identity changed</param>
        </member>
        <member name="M:Concept.Model.ConceptLink.OnChange">
            <summary>
            Called when this link's reference changes.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptLink.OnBeforeChange">
            <summary>
            Called when just before this link's reference changes.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptLink.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposeManagedResources"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Concept.Model.ConceptRegistry">
            <summary>
            The ConceptRegistry provides a way to create a common root between multiple hierarchical models, by doing this links can be done between these models.
            More information about ConceptRegistry can be found 
            <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DesigningAndImplementingAModel.html">here</see> under the "Concept Registry" section.
            </summary>
        </member>
        <member name="P:Concept.Model.ConceptRegistry.Registry">
            <summary>
            Gets the registry.
            </summary>
            <value>The registry.</value>
        </member>
        <member name="M:Concept.Model.ConceptRegistry.RegisterReferential(Concept.Model.ConceptContainer)">
            <summary>
            Registers a new referential.
            </summary>
            <param name="container">The new referential</param>
        </member>
        <member name="M:Concept.Model.ConceptRegistry.UnregisterReferential(Concept.Model.ConceptContainer)">
            <summary>
            Unregisters a referential.
            </summary>
            <param name="container">The referential to unregister.</param>
        </member>
        <member name="M:Concept.Model.ConceptRegistry.ReleaseReferences(Concept.Model.ConceptContainer)">
            <summary>
            Releases the references.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Concept.Model.ConceptRegistry.FindReferentialByName(System.String)">
            <summary>
            Finds the referential by <paramref name="name"/>
            </summary>
            <param name="name">The name of the referential to find.</param>
            <returns>The referential found</returns>
        </member>
        <member name="T:Concept.Model.ConceptSingleLink">
            <summary>
            Provides a simple way to connect one <see cref="T:Concept.Model.ConceptElement"/> to another and keep this connection through time (starting/stopping application), by serializing the linked object path.
            The <see cref="T:Concept.Model.ConceptLink"/> uses a pattern called "Lazy Binding" (also known as lazy linking or on-demand symbol resolution) to resolve its paths.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptSingleLink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptSingleLink"/> class.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptSingleLink.IsLinkedTo(Concept.Model.ConceptElement)">
            <summary>
            Determines whether this link has a reference to <paramref name="reference"/>.
            </summary>
            <param name="reference">The reference to be tested</param>
            <returns><c>true</c> if this link has <paramref name="reference"/> as a reference; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptSingleLink.Clear">
            <summary>
            Clears this instance. Sets this link's <see cref="P:Concept.Model.ConceptSingleLink.Reference"/> to null.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptSingleLink.WriteTo(Concept.Utils.IDataStoreNode)">
            <summary>
            Saves this link to a <see cref="T:Concept.Utils.IDataStoreNode">node</see>.
            </summary>
            <param name="node">The node where the data will be saved.</param>
        </member>
        <member name="M:Concept.Model.ConceptSingleLink.WriteTo(Concept.Utils.IDataStoreNode,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves this link with specific subjects to a <see cref="T:Concept.Utils.IDataStoreNode">node</see>.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The node where the data will be saved.</param>
            <param name="subjects">The subjects to use to serialize specific elements and properties of the link.</param>
        </member>
        <member name="M:Concept.Model.ConceptSingleLink.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector)">
            <summary>
            Loads this link from a <see cref="T:Concept.Utils.IDataStoreNode">node</see>.
            </summary>
            <param name="node">The node containing the data of the link.</param>
            <param name="factories">The list of factories to use for the deserialisation of the link.</param>
            <param name="messageCollector">The message collector filled with the errors occuring during the process.</param>
        </member>
        <member name="M:Concept.Model.ConceptSingleLink.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads this link with specific subjects from a <see cref="T:Concept.Utils.IDataStoreNode">node</see>.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The node containing the data of the link.</param>
            <param name="factories">The list of factories to use for the deserialisation of the link.</param>
            <param name="messageCollector">The message collector filled with the errors occuring during the process.</param>
            <param name="subjects">The subjects to use to deserialize specific elements and properties of the link.</param>
        </member>
        <member name="M:Concept.Model.ConceptSingleLink.ReleaseReferences(System.Boolean)">
            <summary>
            Clears this link's references by releasing them.
            </summary>
            <param name="notifyLinkChanged"><c>true</c> to throw <see cref="M:Concept.Model.ConceptLink.OnBeforeChange"/> and <see cref="M:Concept.Model.ConceptLink.OnChange"/> before and after releasing the references.</param>
        </member>
        <member name="M:Concept.Model.ConceptSingleLink.GetHashCode(System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Gets a hash code that represents the serialized properties of this element. This hash code may change if the instance has changed between two
            calls of this function. This hash code is not unique for an instance.</summary>
            <param name="recursive">Defines if the hash also must represents the nested items of the instance</param>
            <param name="subjects">The subjects to use to choose the elements and properties to include to the hash</param>
            <returns>
            A <see cref="T:System.String" /> that represents the serialized properties of this instance.
            </returns>
        </member>
        <member name="P:Concept.Model.ConceptSingleLink.DisplayValue">
            <summary>
            Gets the <see cref="P:Concept.Model.ConceptElement.DisplayName"/> of the referenced <see cref="T:Concept.Model.ConceptElement"/> if the reference could be resolved, an empty string if this link is not set 
            and the path surrounded by question marks if the reference could not be resolved.
            </summary>
            <value>The display value</value>
        </member>
        <member name="P:Concept.Model.ConceptSingleLink.LinkDiagnostic">
            <summary>
            Gets the link <see cref="T:Concept.Model.ConceptLinkDiagnostic">diagnostic</see>. Returns <see cref="F:Concept.Model.ConceptLinkDiagnostic.Ok"/> if the link's reference could be resolved, 
            <see cref="F:Concept.Model.ConceptLinkDiagnostic.Error"/> if it could not be resolved, <see cref="F:Concept.Model.ConceptLinkDiagnostic.Warning"/> if the link is not set and <see cref="P:Concept.Model.ConceptSingleLink.Mandatory"/> is <c>true</c>,
            <see cref="F:Concept.Model.ConceptLinkDiagnostic.Information"/> if the link is not set and <see cref="P:Concept.Model.ConceptSingleLink.Mandatory"/> is <c>false</c>
            </summary>
            <value>The link <see cref="T:Concept.Model.ConceptLinkDiagnostic">diagnostic</see>.</value>
        </member>
        <member name="P:Concept.Model.ConceptSingleLink.DiagnosticText">
            <summary>
            Gets the diagnostic text.
            </summary>
            <value>The diagnostic text.</value>
        </member>
        <member name="F:Concept.Model.ConceptSingleLink.LinkPathPropertyName">
            <summary>
            Identifies the <see cref="P:Concept.Model.ConceptSingleLink.LinkPath"/> property. Useful when working with the <see cref="!:PropertyChanged"/> event.
            </summary>
        </member>
        <member name="P:Concept.Model.ConceptSingleLink.LinkPath">
            <summary>
            Gets or sets the link path. The link path can be relative, if the referenced item is in the same object tree as the link, or absolute.
            More information about links and hierarchical model can be found 
            <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DesigningAndImplementingAModel.html">here</see>.
            </summary>
            <value>The link path.</value>
        </member>
        <member name="P:Concept.Model.ConceptSingleLink.Defined">
            <summary>
            Gets a boolean indicating whether this <see cref="T:Concept.Model.ConceptSingleLink"/> is defined.
            </summary>
            <value><c>true</c> if defined; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Concept.Model.ConceptSingleLink.ReferencePropertyName">
            <summary>
            Identifies the <see cref="P:Concept.Model.ConceptSingleLink.Reference"/> property. Useful when working with the <see cref="!:PropertyChanged"/> event.
            </summary>
        </member>
        <member name="P:Concept.Model.ConceptSingleLink.Reference">
            <summary>
            Gets or sets this link's reference.
            </summary>
            <value>The reference.</value>
        </member>
        <member name="P:Concept.Model.ConceptSingleLink.CheckedReference">
            <summary>
            Gets the checked reference. If the reference is empty or could not be resolved, throws <see cref="T:Concept.Utils.ConceptException"/>.
            </summary>
            <value>The checked reference.</value>
            <exception cref="T:Concept.Utils.ConceptException"><see cref="P:Concept.Model.ConceptSingleLink.Reference"/> is empty or could not be resolved</exception>
        </member>
        <member name="P:Concept.Model.ConceptSingleLink.ValidReference">
            <summary>
            Gets a value indicating whether the <see cref="P:Concept.Model.ConceptSingleLink.Reference"/> could be resolved and <see cref="M:Concept.Model.ConceptLink.CanAccept(Concept.Model.ConceptElement)"/> returned <c>true</c>.
            </summary>
            <value><c>true</c> if reference is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.ConceptSingleLink.Mandatory">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Concept.Model.ConceptSingleLink"/> is mandatory.
            </summary>
            <value><c>true</c> if mandatory; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Concept.Model.ConceptSingleLink.OnChange">
            <summary>
            Called when this link's reference changes.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptSingleLink.ReferenceIdentityChange(Concept.Model.ConceptElement)">
            <summary>
            Method called when the <paramref name="reference"/>'s identity changed. If <see cref="P:Concept.Model.ConceptLink.LinkedToElement"/> or <see cref="P:Concept.Model.ConceptLink.ElementLinked"/> is set to <c>true</c> 
            the link's reference is maintained, otherwise the link's reference is released.
            </summary>
            <param name="reference">The reference whose identity changed</param>
        </member>
        <member name="T:Concept.Model.ConceptSingleLink`1">
             <summary>
             Provides a simple way to connect one <see cref="T:Concept.Model.ConceptElement"/> to another and keep this connection through time (starting/stopping application), by serializing the linked object path.
             The <see cref="T:Concept.Model.ConceptLink"/> uses a pattern called "Lazy Binding" (also known as lazy linking or on-demand symbol resolution) to resolve its paths.
             </summary>
             <remarks>
             The class T can inherit from ConceptElement or implement an Interface.
             Nevertheless, the instance that will be linked must be a ConceptElement.
            </remarks>
             <typeparam name="T"></typeparam>
        </member>
        <member name="P:Concept.Model.ConceptSingleLink`1.Reference">
            <summary>
            Gets or sets this link's reference.
            </summary>
            <value>The reference.</value>
        </member>
        <member name="P:Concept.Model.ConceptSingleLink`1.CheckedReference">
            <summary>
            Gets the checked reference. If the reference is empty or could not be resolved, throws <see cref="T:Concept.Utils.ConceptException"/>.
            </summary>
            <value>The checked reference.</value>
            <exception cref="T:Concept.Utils.ConceptException"><see cref="P:Concept.Model.ConceptSingleLink`1.Reference"/> is empty or could not be resolved</exception>
        </member>
        <member name="P:Concept.Model.ConceptSingleLink`1.ItemType">
            <summary>
            Gets the type of items that can be linked to this instance.
            </summary>
            <value>The type of the item.</value>
        </member>
        <member name="T:Concept.Model.ConceptMultipleLink">
            <summary>
            Provides a simple way to connect one <see cref="T:Concept.Model.ConceptElement"/> to others and keep these connections through time (starting/stopping application), by serializing the linked objects paths.
            The <see cref="T:Concept.Model.ConceptLink"/> uses a pattern called "Lazy Binding" (also known as lazy linking or on-demand symbol resolution) to resolve its paths.
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptMultipleLink.DefaultMaxCount">
            <summary>
            The default maximum number of references allowed for this link. -1 means there is no maximum.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptMultipleLink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptMultipleLink"/> class.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptMultipleLink.IsLinkedTo(Concept.Model.ConceptElement)">
            <summary>
            Determines whether this link has a reference to <paramref name="reference"/>.
            </summary>
            <param name="reference">The reference to be tested</param>
            <returns><c>true</c> if this link has <paramref name="reference"/> as a reference; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptMultipleLink.Clear">
            <summary>
            Clears this instance. Sets this link's <see cref="P:Concept.Model.ConceptMultipleLink.References"/> to null.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptMultipleLink.WriteTo(Concept.Utils.IDataStoreNode)">
            <summary>
            Saves this link to a <see cref="T:Concept.Utils.IDataStoreNode">node</see>.
            </summary>
            <param name="node">The node where the data will be saved.</param>
        </member>
        <member name="M:Concept.Model.ConceptMultipleLink.WriteTo(Concept.Utils.IDataStoreNode,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves this link with specific subjects to a <see cref="T:Concept.Utils.IDataStoreNode">node</see>.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The node where the data will be saved.</param>
            <param name="subjects">The subjects to use to serialize specific elements and properties of the link.</param>
        </member>
        <member name="M:Concept.Model.ConceptMultipleLink.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector)">
            <summary>
            Loads this link from a <see cref="T:Concept.Utils.IDataStoreNode">node</see>.
            </summary>
            <param name="node">The node containing the data of the link.</param>
            <param name="factories">The list of factories to use for the deserialisation of the link.</param>
            <param name="messageCollector">The message collector filled with the errors occuring during the process.</param>
        </member>
        <member name="M:Concept.Model.ConceptMultipleLink.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads this link with specific subjects from a <see cref="T:Concept.Utils.IDataStoreNode">node</see>.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The node containing the data of the link.</param>
            <param name="factories">The list of factories to use for the deserialisation of the link.</param>
            <param name="messageCollector">The message collector filled with the errors occuring during the process.</param>
            <param name="subjects">The subjects to use to deserialize specific elements and properties of the link.</param>
        </member>
        <member name="M:Concept.Model.ConceptMultipleLink.ReleaseReferences(System.Boolean)">
            <summary>
            Clears this link's references by releasing them.
            </summary>
            <param name="notifyLinkChanged">Not implemented</param>
        </member>
        <member name="M:Concept.Model.ConceptMultipleLink.GetHashCode(System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Gets a hash code that represents the serialized properties of this element. This hash code may change if the instance has changed between two
            calls of this function. This hash code is not unique for an instance.</summary>
            <param name="recursive">Defines if the hash also must represents the nested items of the instance</param>
            <param name="subjects">The subjects to use to choose the elements and properties to include to the hash</param>
            <returns>
            A <see cref="T:System.String" /> that represents the serialized properties of this instance.
            </returns>
        </member>
        <member name="P:Concept.Model.ConceptMultipleLink.DisplayValue">
            <summary>
            Gets the <see cref="P:Concept.Model.ConceptElement.DisplayName">display names</see> of the referenced elements separated by a comma if the references could be resolved, an empty string if this link is not set 
            and the path surrounded by question marks if the reference could not be resolved.
            </summary>
            <value>The display value</value>
        </member>
        <member name="P:Concept.Model.ConceptMultipleLink.LinkDiagnostic">
            <summary>
            Gets the link <see cref="T:Concept.Model.ConceptLinkDiagnostic">diagnostic</see>. Returns <see cref="F:Concept.Model.ConceptLinkDiagnostic.Ok"/> if all of the link's references could be resolved, 
            <see cref="F:Concept.Model.ConceptLinkDiagnostic.Error"/> if one or more of them could not be resolved, <see cref="F:Concept.Model.ConceptLinkDiagnostic.Warning"/> if the link is not set and <see cref="!:Mandatory"/> is <c>true</c>,
            <see cref="F:Concept.Model.ConceptLinkDiagnostic.Information"/> if the link is not set and <see cref="!:Mandatory"/> is <c>false</c>
            </summary>
            <value>The link <see cref="T:Concept.Model.ConceptLinkDiagnostic">diagnostic</see>.</value>
        </member>
        <member name="P:Concept.Model.ConceptMultipleLink.DiagnosticText">
            <summary>
            Gets the diagnostic text.
            </summary>
            <value>The diagnostic text.</value>
        </member>
        <member name="F:Concept.Model.ConceptMultipleLink.LinkPathsPropertyName">
            <summary>
            Identifies the <see cref="P:Concept.Model.ConceptMultipleLink.LinkPaths"/> property. Useful when working with the <see cref="!:PropertyChanged"/> event.
            </summary>
        </member>
        <member name="P:Concept.Model.ConceptMultipleLink.LinkPaths">
            <summary>
            Gets or sets the link paths. The link paths can be relative, if the referenced item is in the same object tree as the link, or absolute.
            More information about links and hierarchical model can be found 
            <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DesigningAndImplementingAModel.html">here</see>.
            </summary>
            <value>The link paths.</value>
        </member>
        <member name="F:Concept.Model.ConceptMultipleLink.ReferencesPropertyName">
            <summary>
            Identifies the <see cref="P:Concept.Model.ConceptMultipleLink.References"/> property. Useful when working with the <see cref="!:PropertyChanged"/> event.
            </summary>
        </member>
        <member name="P:Concept.Model.ConceptMultipleLink.References">
            <summary>
            Gets or sets this link's references.
            </summary>
            <value>The references.</value>
        </member>
        <member name="M:Concept.Model.ConceptMultipleLink.AddReference(Concept.Model.ConceptElement)">
            <summary>
            Adds a new reference.
            </summary>
            <param name="reference">The new reference to add inside to the list of references.</param>
            <exception cref="T:System.NotSupportedException">Occurs when the reference cannot be added inside the list.</exception>
        </member>
        <member name="M:Concept.Model.ConceptMultipleLink.RemoveReference(Concept.Model.ConceptElement)">
            <summary>
            Removes the reference <paramref name="element"/>.
            </summary>
            <param name="element">The reference to delete from the list of references.</param>
            <exception cref="T:System.NotSupportedException">Occurs when the reference is not found inside the list of references.</exception>
        </member>
        <member name="P:Concept.Model.ConceptMultipleLink.CheckedReferences">
            <summary>
            Gets the checked references. If the references list is empty or one of them could not be resolved, throws <see cref="T:Concept.Utils.ConceptException"/>.
            </summary>
            <value>The checked references.</value>
            <exception cref="T:Concept.Utils.ConceptException"><see cref="P:Concept.Model.ConceptMultipleLink.References"/> is empty or one of them could not be resolved</exception>
        </member>
        <member name="P:Concept.Model.ConceptMultipleLink.AllReferencesValid">
            <summary>
            Gets a value indicating whether all of the <see cref="P:Concept.Model.ConceptMultipleLink.References"/> could be resolved.
            </summary>
            <value><c>true</c> if all the <see cref="P:Concept.Model.ConceptMultipleLink.References"/> are valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.ConceptMultipleLink.MinCount">
            <summary>
            Gets or sets the minimum number of references accepted for this link.
            </summary>
            <value>The minimum number of elements linked.</value>
        </member>
        <member name="P:Concept.Model.ConceptMultipleLink.MaxCount">
            <summary>
            Gets or sets the maximum number of references accepted for this link.
            </summary>
            <value>The maximum number of elements linked.</value>
        </member>
        <member name="P:Concept.Model.ConceptMultipleLink.HasValidReference">
            <summary>
            Gets a value indicating whether this instance has valid references.
            </summary>
            <value><c>true</c> if this instance has only valid references; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Concept.Model.ConceptMultipleLink.IsReferenceValid(Concept.Model.ConceptElement)">
            <summary>
            Determines whether the <paramref name="reference"/> could be resolved and is or inherits from <see cref="P:Concept.Model.ConceptLink.ItemType"/>.
            </summary>
            <param name="reference">The reference.</param>
            <returns><c>true</c> if the <paramref name="reference"/> could be resolved and is or inherits from <see cref="P:Concept.Model.ConceptLink.ItemType"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptMultipleLink.OnChange">
            <summary>
            Called when this link's references change.
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptMultipleLink.PathList">
            <summary>
            The paths list. The paths can be relative, if the referenced item is in the same object tree as the link, or absolute.
            More information about links and hierarchical model can be found 
            <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DesigningAndImplementingAModel.html">here</see>.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptMultipleLink.ReferenceIdentityChange(Concept.Model.ConceptElement)">
            <summary>
            Method called when the <paramref name="reference"/>'s identity changed. If <see cref="P:Concept.Model.ConceptLink.LinkedToElement"/> or <see cref="P:Concept.Model.ConceptLink.ElementLinked"/> is set to <c>true</c> 
            the link's reference is maintained, otherwise the link's reference is released.
            </summary>
            <param name="reference">The reference whose identity changed</param>
        </member>
        <member name="T:Concept.Model.ConceptMultipleLink`1">
            <summary>
            Provides a simple way to connect one <see cref="T:Concept.Model.ConceptElement"/> to others and keep these connections through time (starting/stopping application), by serializing the linked objects paths.
            The <see cref="T:Concept.Model.ConceptLink"/> uses a pattern called "Lazy Binding" (also known as lazy linking or on-demand symbol resolution) to resolve its paths.
            </summary>
            <remarks>
            The class T can be a derived class of ConceptElement or an Interface.
            Nevertheless, the instance that will be linked must be a ConceptElement.
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Concept.Model.ConceptMultipleLink`1.References">
            <summary>
            Gets or sets this link's references.
            </summary>
            <value>The references.</value>
        </member>
        <member name="P:Concept.Model.ConceptMultipleLink`1.CheckedReferences">
            <summary>
            Gets the checked references. If the references list is empty or one of them could not be resolved, throws <see cref="T:Concept.Utils.ConceptException"/>.
            </summary>
            <value>The checked references.</value>
            <exception cref="T:Concept.Utils.ConceptException"><see cref="P:Concept.Model.ConceptMultipleLink`1.References"/> is empty or one of them could not be resolved</exception>
        </member>
        <member name="P:Concept.Model.ConceptMultipleLink`1.ItemType">
            <summary>
            Gets the type of items that can be linked to this instance.
            </summary>
            <value>The type of the item.</value>
        </member>
        <member name="P:Concept.Model.ConceptMultipleLink`1.ValidReferences">
            <summary>
            Gets the valid references. This property is obsolete use <see cref="P:Concept.Model.ConceptMultipleLink`1.References"/> instead.
            </summary>
            <value>The valid references.</value>
        </member>
        <member name="T:Concept.Model.ConceptDynamicComponent">
            <summary>
            Represents the base class for a component containing a polymorphous element.
            As it inherits from ConceptElement, instances of this class have the mechanism to serialize and
            deserialize themselves from/to a node or a file.
            </summary>
        </member>
        <member name="P:Concept.Model.ConceptDynamicComponent.BaseComponent">
            <summary>Gets or sets the polymorphous component as <see cref="T:Concept.Model.ConceptElement">ConceptElement</see>.</summary>
            <value>The polymorphous component as ConceptElement.</value>
        </member>
        <member name="F:Concept.Model.ConceptDynamicComponent.ComponentPropertyName">
            <summary>
            Constant string to manage <see cref="P:Concept.Model.ConceptDynamicComponent`1.Component"/> property changed.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptDynamicComponent.IsValid">
            <summary>Determines whether this instance is valid. The instance is valid when the <see cref="P:Concept.Model.ConceptDynamicComponent.BaseComponent">BaseComponent</see> is not null.</summary>
            <returns>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Concept.Model.ConceptDynamicComponent.ItemType">
            <summary>
            Gets the type of the polymorphous component.
            </summary>
            <value>The type of the polymorphous component.</value>
        </member>
        <member name="M:Concept.Model.ConceptDynamicComponent.Add(Concept.Model.ConceptElement)">
            <summary>
            Adds the specified item to the internal list of the <see cref="T:Concept.Model.ConceptContainer" />.
            The <see cref="T:Concept.Model.ConceptDynamicComponent" /> is a special <see cref="T:Concept.Model.ConceptContainer" /> because it can only contain one element in its internal list which is the polymorphous component.
            Each adding replaces the polymorphous component.
            </summary>
            <param name="item">The new polymorphous component</param>
            <exception cref="T:System.NotSupportedException">The item cannot be added to the internal list.</exception>
        </member>
        <member name="M:Concept.Model.ConceptDynamicComponent.GetHashCode(System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a hash code that represents the serializable properties of this element. This hash code may change if the polymorphous component has changed between two calls of this function.
            This hash code is not unique for an instance.
            </summary>
            <param name="recursive">Defines if the hash also must represents the nested items of the instance</param>
            <param name="subjects">The subjects to use to choose the elements and properties to include to the hash</param>
            <returns>
            A <see cref="T:System.String"/> that represents the code.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptDynamicComponent.Clear">
            <summary>
            Clears this instance by removing the polymorphous component.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptDynamicComponent.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources. When overriding this method, always call the base.Dispose() at the end of your implementation instead of at the beginning.
            </summary>
            <param name="disposeManagedResources"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Concept.Model.ConceptDynamicComponent.AcceptOnlyProvided">
            <summary>
            Gets or sets if the item accepted as a polymorphous component should only be of a provided type.
            A provider is useful to make certain type of processes available depending on the current configuration.
            </summary>
            <value><c>true</c> if the item accepted as a polymorphous component must be of a provided type; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Concept.Model.ConceptDynamicComponent.CanAccept(Concept.Model.ConceptFactory)">
            <summary>
            Determines whether this instance can accept an object with the specified <paramref name="factory"/> as a polymorphous component. 
            </summary>
            <param name="factory">The factory.</param>
            <returns>
            	<c>true</c> if this instance can accept the specified factory; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptDynamicComponent.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector)">
            <summary>
            Reads all serialized properties and contained elements of a polymorphous component from an <see cref="T:Concept.Utils.IDataStoreNode">IDataStoreNode</see>.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The node containing the data of the polymorphous component.</param>
            <param name="factories">The list of factories to use for the deserialization of the polymorphous component.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
        </member>
        <member name="M:Concept.Model.ConceptDynamicComponent.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reads all serialized properties and contained elements of a polymorphous component from an <see cref="T:Concept.Utils.IDataStoreNode">IDataStoreNode</see> using specific subjects.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The node containing the data of the polymorphous component.</param>
            <param name="factories">The list of factories to use for the deserialization of the polymorphous component.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
            <param name="subjects">The subjects to use to deserialize specific elements and properties of the polymorphous component.</param>
        </member>
        <member name="M:Concept.Model.ConceptDynamicComponent.WriteTo(Concept.Utils.IDataStoreNode)">
            <summary>
            Saves all nested properties marked with the <see cref="T:Concept.Model.ConceptSerializedAttribute"/> and contained elements of the polymorphous component in a <see cref="T:Concept.Utils.IDataStoreNode">node</see>.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The node where the data will be saved.</param>
        </member>
        <member name="M:Concept.Model.ConceptDynamicComponent.WriteTo(Concept.Utils.IDataStoreNode,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves all nested properties marked with the <see cref="T:Concept.Model.ConceptSerializedAttribute"/> and contained elements of the polymorphous component in a <see cref="T:Concept.Utils.IDataStoreNode">node</see>.
            The serialization can be conditional based on a subject.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The node where the data will be saved.</param>
            <param name="subjects">The subjects to use to serialize specific elements and properties of the polymorphous component.</param>
        </member>
        <member name="T:Concept.Model.ConceptDynamicComponent`1">
            <summary>Represents a generic implementation of ConceptDynamicComponent to define the base class of the polymorphous element.</summary>
            <typeparam name="T">The base class of the polymorphous element</typeparam>
        </member>
        <member name="P:Concept.Model.ConceptDynamicComponent`1.Component">
            <summary>
            Gets or sets the polymorphous component of the base class T.
            </summary>
            <value>the polymorphous component of the base class T.</value>
        </member>
        <member name="P:Concept.Model.ConceptDynamicComponent`1.ItemType">
            <summary>
            Gets the base type of the polymorphous component.
            </summary>
            <value>The base type of the polymorphous component.</value>
        </member>
        <member name="M:Concept.Model.ConceptDynamicComponent`1.CanAdd(Concept.Model.ConceptElement,System.String@)">
            <summary>
            Determines whether this instance can add the specified item in its internal list.
            </summary>
            <param name="element">The element to be added.</param>
            <param name="message">The message that contains errors occurring during the process.</param>
            <returns><c>true</c> if this instance can add the specified element; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Concept.Model.NotifierElement">
            <summary>Provides an implementation of <see cref="!:https://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanged(v=vs.110).aspx">INotifyPropertyChanged</see> interface for classes which
            do not inherit from a Concept class.</summary>
        </member>
        <member name="E:Concept.Model.NotifierElement.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Concept.Model.NotifierElement.DoPropertyChanged(System.String)">
            <summary>
            Throws the event <see cref="E:Concept.Model.NotifierElement.PropertyChanged"/> for the property whose name is passed as a parameter
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="T:Concept.Model.ConceptElement">
            <summary>Represents the base class of the modelling features of the Concept framework. These modelling features are used to naturally represent the business domain. 
            Inheriting from this class is essential to benefit from Concept fully integrated mechanisms, such as serialization, auto creation, provider pattern and so on. To have a complete view of them see 
            <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DesigningAndImplementingAModel.html"/>.
            This class is also the base class of other modelling classes, which can be used to easily represent and persist lists of components 
            (<see cref="T:Concept.Model.ConceptStaticList"/>, <see cref="T:Concept.Model.ConceptDynamicList"/>), components themselves (<see cref="T:Concept.Model.ConceptComponent"/>, 
            <see cref="T:Concept.Model.ConceptDynamicComponent"/>) and links between them (<see cref="T:Concept.Model.ConceptSingleLink"/>, <see cref="T:Concept.Model.ConceptMultipleLink"/>).</summary>
        </member>
        <member name="M:Concept.Model.ConceptElement.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Concept.Model.ConceptElement" /> class and sets the <see cref="P:Concept.Model.ConceptElement.Name" /> with <see cref="P:Concept.Model.ConceptElement.DefaultName" />.</summary>
        </member>
        <member name="F:Concept.Model.ConceptElement.PathSeparator">
            <summary>Defines the separator used to separate each element of the path.</summary>
        </member>
        <member name="F:Concept.Model.ConceptElement.PathThis">
            <summary>Defines the symbol used in relative paths to specify the current element.</summary>
        </member>
        <member name="F:Concept.Model.ConceptElement.PathParent">
            <summary>Defines the symbol used in relative paths to specify the container of the current element.</summary>
        </member>
        <member name="P:Concept.Model.ConceptElement.DefaultName">
            <summary>Gets the default name. Used by default when the <see cref="P:Concept.Model.ConceptElement.Name" /> is not set.</summary>
            <value>The default name</value>
        </member>
        <member name="P:Concept.Model.ConceptElement.Name">
            <summary>Gets or sets the name of the ConceptElement. The name is used as a unique id for the identification of an element in a list or in a <see cref="T:Concept.Model.ConceptContainer" /> .</summary>
            <value>The name.</value>
        </member>
        <member name="P:Concept.Model.ConceptElement.Path">
            <summary>
            Gets the path of the ConceptElement. The path is built by appending the name of each Container of the ConceptElement. 
            The top <see cref="T:Concept.Model.ConceptContainer">ConceptContainer</see> is called the Root.
            </summary>
            <value>The path of the ConceptElement.</value>
        </member>
        <member name="P:Concept.Model.ConceptElement.Container">
            <summary>
            Gets or sets the container of the ConceptElement. The <see cref="T:Concept.Model.ConceptContainer">ConceptContainer</see>
            is the ConceptElement that directly owns the elements.
            </summary>
            <value>The container of the ConceptElement.</value>
        </member>
        <member name="P:Concept.Model.ConceptElement.RootContainer">
            <summary>Gets the root container of the ConceptElement. The <see cref="T:Concept.Model.ConceptContainer">ConceptContainer</see> is the ConceptElement at the top of the hierarchical
            structure.</summary>
            <value>The root container of the ConceptElement.</value>
        </member>
        <member name="M:Concept.Model.ConceptElement.HasParent(Concept.Model.ConceptContainer)">
            <summary>Determines whether the specified <see cref="T:Concept.Model.ConceptContainer">ConceptContainer</see> is part of the hierarchy of the ConceptElement.</summary>
            <param name="container">The container to find.</param>
            <returns>
              <c>true</c> if the specified container is a container of the ConceptElement; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Concept.Model.ConceptElement.Options">
            <summary>Gets or sets the options of serialization of this element.  Enables to specify <see cref="F:Concept.Model.ConceptOptions.NotSerialized">ConceptOptions.NotSerialized</see> to disable serialization of
            this <see cref="T:Concept.Model.ConceptElement" />.</summary>
            <value>The options of this element.</value>
        </member>
        <member name="F:Concept.Model.ConceptElement.IdentityChanged">
            <summary>
            This weak event occurs when the <see cref="P:Concept.Model.ConceptElement.Name"/> or the <see cref="P:Concept.Model.ConceptElement.Path"/> properties have been changed.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptElement.DoChange(Concept.Model.ConceptElement)">
            <summary>Throws the event <see cref="E:Concept.Model.ConceptElement.Changed" /> on this instance and on its <see cref="P:Concept.Model.ConceptElement.Container" />, recursively for each <see cref="P:Concept.Model.ConceptElement.Container" />.</summary>
        </member>
        <member name="E:Concept.Model.ConceptElement.Changed">
            <summary>
            Occurs when the element or a child has been modified.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptElement.OnPathChanged">
            <summary>Called when the <see cref="P:Concept.Model.ConceptElement.Path" /> property changed</summary>
        </member>
        <member name="M:Concept.Model.ConceptElement.OnNameChanged">
            <summary>
            Called when the %Name% property changed.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptElement.OnContainerChanged">
            <summary>Called when the <see cref="P:Concept.Model.ConceptElement.Container" /> property changed.</summary>
        </member>
        <member name="M:Concept.Model.ConceptElement.SetDefaultValues">
            <summary>
            Sets the properties of the <see cref="T:Concept.Model.ConceptElement"/> with their default values. This base implementation is empty. 
            DefaultValues can be set by using the <see cref="T:Concept.Model.ConceptDefaultValueAttribute"/> attribute.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptElement.Clear">
            <summary>
            Clears the data of this instance. This base implementation is empty.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptElement.Clone">
            <summary>Clones this instance and its children. Creates a new object with the <see cref="P:Concept.Model.ConceptElement.Factory" /> of this instance and uses the <see cref="M:Concept.Model.ConceptElement.CopyFrom(Concept.Model.ConceptElement)" /> method to copy data.</summary>
            <returns>The new <see cref="T:Concept.Model.ConceptElement" /> which is the clone of this instance.</returns>
        </member>
        <member name="M:Concept.Model.ConceptElement.CopyFrom(Concept.Model.ConceptElement)">
            <summary>Copies all nested serialized properties and all contained elements from the source to this instance.
            To do a deep copy, this method use the serialization mechanism. All the data of the source is copied in an <see cref="T:Concept.Utils.XmlDataStore">XmlDataStore</see>
            with the <see cref="M:Concept.Model.ConceptElement.WriteTo(Concept.Utils.IDataStoreNode)">WriteTo</see> method then this data is read by this instance with
            the <see cref="M:Concept.Model.ConceptElement.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector)">ReadFrom</see> method.</summary>
            <param name="source">The source used for the copy. This instance and the source should be of the same type.</param>
            <exception caption="Source null" cref="T:Concept.Utils.ConceptException">The source passed as a parameter is null.</exception>
            <exception caption="Different types" cref="T:Concept.Utils.ConceptException">This instance and the source passed as a parameter are not of the same type.</exception>
        </member>
        <member name="M:Concept.Model.ConceptElement.GetHashCode(System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Gets a hash code that represents the serialized properties of this element. This hash code may change if the instance has changed between two
            calls of this function. This hash code is not unique for an instance.</summary>
            <param name="recursive">Defines if the hash also must represents the nested items of the instance</param>
            <param name="subjects">The subjects to use to choose the elements and properties to include to the hash</param>
            <returns>
            A <see cref="T:System.String" /> that represents the serialized properties of this instance.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptElement.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance in a XML format.
            </summary>
            <returns>
            The <see cref="T:System.String"/> that represents this instance in a XML format.
            </returns>
        </member>
        <member name="F:Concept.Model.ConceptElement.EntryName">
            <summary>
            Constant string used as the tag to serialize the <see cref="P:Concept.Model.ConceptElement.Name"/> property.
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptElement.EntryFactory">
            <summary>
            Constant string used as the tag to serialize the <see cref="P:Concept.Model.ConceptElement.Factory"/> property.
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptElement.EntryCount">
            <summary>
            Constant string used as the tag to serialize the <see cref="P:Concept.Model.ConceptContainer.Count"/> property.
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptElement.EntryRoot">
            <summary>
            Constant string used as the tag to serialize the root of the concept model.
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptElement.EntryData">
            <summary>
            Constant string used as the tag to serialize the properties of a <see cref="P:Concept.Model.ConceptDynamicComponent.BaseComponent"/> and of each item of a <see cref="T:Concept.Model.ConceptList"/>.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptElement.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector)">
            <summary>
            Loads a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> from a <see cref="T:Concept.Utils.IDataStoreNode">node</see>. This base implementation is empty.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The node containing the data of the ConceptElement.</param>
            <param name="factories">The list of factories to use for the deserialization of the <see cref="T:Concept.Model.ConceptElement" />.</param>
            <param name="messageCollector">The message collector filled with the errors occuring during the process.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,System.String)">
            <summary>
            Loads a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> with a specific subject from a <see cref="T:Concept.Utils.IDataStoreNode">node</see>. Calls the other ReadFrom methods with the correct parameters.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The node containing the data of the <see cref="T:Concept.Model.ConceptElement" />.</param>
            <param name="factories">The list of factories to use for the deserialization of the <see cref="T:Concept.Model.ConceptElement" />.</param>
            <param name="messageCollector">The message collector filled with the errors occuring during the process.</param>
            <param name="subject">The subject to use to deserialize specific elements and properties of the <see cref="T:Concept.Model.ConceptElement" />.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> with specific subjects from a <see cref="T:Concept.Utils.IDataStoreNode">node</see>. This base implementation is empty.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The node containing the data of the <see cref="T:Concept.Model.ConceptElement" />.</param>
            <param name="factories">The list of factories to use for the deserialization of the <see cref="T:Concept.Model.ConceptElement" />.</param>
            <param name="messageCollector">The message collector filled with the errors occuring during the process.</param>
            <param name="subjects">The subjects to use to deserialize specific elements and properties of the <see cref="T:Concept.Model.ConceptElement" />.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.WriteTo(Concept.Utils.IDataStoreNode)">
            <summary>
            Saves a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> to a <see cref="T:Concept.Utils.IDataStoreNode">node</see>. This base implementation is empty.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The node where the data will be saved.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.WriteTo(Concept.Utils.IDataStoreNode,System.String)">
            <summary>
            Saves a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> with a specific subject to a <see cref="T:Concept.Utils.IDataStoreNode">node</see>. Calls the other WriteTo methods with the correct parameters.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The node where the data will be saved.</param>
            <param name="subject">The subject to use to serialize specific elements and properties of the <see cref="T:Concept.Model.ConceptElement" />.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.WriteTo(Concept.Utils.IDataStoreNode,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> with specific subjects to a <see cref="T:Concept.Utils.IDataStoreNode">node</see>. This base implementation is empty.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The node where the data will be saved.</param>
            <param name="subjects">The subjects to use to serialize specific elements and properties of the <see cref="T:Concept.Model.ConceptElement" />.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            When overriding this method, always call the base.Dispose() at the end of your implementation instead of at the beginning.
            </summary>
            <param name="disposeManagedResources"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="F:Concept.Model.ConceptElement._IsDisposing">
            <summary>
            A flag that provides the disposing state. Typically used to stop events from being propagated when element is being disposed. 
            Used in Concept framework to stop propagation of <see cref="E:Concept.Model.ConceptElement.PropertyChanged"/>, <see cref="M:Concept.Model.ConceptContainer.OnPathChanged"/> and <see cref="E:Concept.Model.ConceptContainer.CollectionChanged"/>.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptElement.LoadFromFile(System.String,Concept.Utils.IMessageCollector)">
            <summary>Loads a <see cref="T:Concept.Model.ConceptElement" /> from a file containing its serialization in XML format, using all the factories of the <see cref="T:Concept.Model.PluginClassManager"/>.</summary>
            <param name="fileName">The filename containing the XML serialization of the <see cref="T:Concept.Model.ConceptElement" /></param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.LoadFromFile(System.String,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector)">
            <summary>
            Loads a <see cref="T:Concept.Model.ConceptElement"/> from a file containing its serialization in XML format.
            </summary>
            <param name="fileName">The filename containing the XML serialization of the <see cref="T:Concept.Model.ConceptElement" />.</param>
            <param name="factories">The list of factories to use for the deserialization of the <see cref="T:Concept.Model.ConceptElement" />.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.LoadFromFile(System.String,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,System.String)">
            <summary>
            Loads a <see cref="T:Concept.Model.ConceptElement"/> with a specific subject from a file containing its serialization in XML format.
            </summary>
            <param name="fileName">The filename containing the XML serialization of the <see cref="T:Concept.Model.ConceptElement" />.</param>
            <param name="factories">The list of factories to use for the deserialization of the <see cref="T:Concept.Model.ConceptElement" />.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
            <param name="subject">The subject to use to deserialize specific elements and properties of the <see cref="T:Concept.Model.ConceptElement" />.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.SaveToFile(System.String)">
            <summary>
            Saves a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see>  to a file which will contain its serialization in XML format.
            </summary>
            <param name="fileName">The filename of the file which will contain the XML serialization of the <see cref="T:Concept.Model.ConceptElement" />.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.SaveToFile(System.String,System.String)">
            <summary>
            Saves a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> with a specific subject to a file which will contain its serialization in XML format.
            </summary>
            <param name="fileName">The filename of the file which will contain the XML serialization of the <see cref="T:Concept.Model.ConceptElement" />.</param>
            <param name="subject">The subject to use to serialize specific elements and properties of the <see cref="T:Concept.Model.ConceptElement" />.</param>
        </member>
        <member name="E:Concept.Model.ConceptElement.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptElement.DoPropertyChanged(System.String)">
            <summary>Throws the event <see cref="E:Concept.Model.ConceptElement.PropertyChanged"/> for the property whose name is passed in parameter.</summary>
            <param name="name">The name of the property which changed.</param>
        </member>
        <member name="P:Concept.Model.ConceptElement.DefaultDisplayName">
            <summary>Gets the default display name. Used by default when the <see cref="P:Concept.Model.ConceptElement.DisplayName" /> is not set.</summary>
            <value>The default display name</value>
        </member>
        <member name="F:Concept.Model.ConceptElement.NamePropertyName">
            <summary>
            Identifies the <see cref="P:Concept.Model.ConceptElement.Name"/> property. Useful when working with the <see cref="E:Concept.Model.ConceptElement.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="P:Concept.Model.ConceptElement.IsNameEditable">
            <summary>Gets a value indicating whether the <see cref="P:Concept.Model.ConceptElement.Name" /> of this instance is editable.</summary>
            <value>
              <c>true</c> if this instance name is editable; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Concept.Model.ConceptElement.DisplayNamePropertyName">
            <summary>
            Identifies the <see cref="P:Concept.Model.ConceptElement.DisplayName"/> property. Useful when working with the <see cref="E:Concept.Model.ConceptElement.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="P:Concept.Model.ConceptElement.DisplayName">
            <summary>Gets the display name. This name is 
            used to display a user friendly name in application view. This property can be translated with the <see cref="T:Concept.Utils.Intl">Intl</see> mechanism.</summary>
            <value>The display name.</value>
        </member>
        <member name="P:Concept.Model.ConceptElement.Tag">
            <summary>
            Gets or sets an arbitrary object value that can be used to store custom information about this element.
            </summary>
            <value>The arbitrary object. The default is null.</value>
        </member>
        <member name="M:Concept.Model.ConceptElement.CreateObjectFromNode(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,Concept.Model.ConceptContainer,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates and load a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> from an XML node.
            This method is obsolete but kept for compatibility with Concept.Hmi 2012.
            </summary>
            <param name="node">The node containing the information on the factory to use and the data of the <see cref="T:Concept.Model.ConceptElement" />.</param>
            <param name="factories">The list of factories to use for the deserialization of the <see cref="T:Concept.Model.ConceptElement" />.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
            <param name="container">The container of the <see cref="T:Concept.Model.ConceptElement" /> to create.</param>
            <param name="subjects">The subjects to use to deserialize specific elements and properties of the <see cref="T:Concept.Model.ConceptElement" />.</param>
            <returns>The <see cref="T:Concept.Model.ConceptElement" /> created based on the xml node.</returns>
        </member>
        <member name="M:Concept.Model.ConceptElement.SaveObjectToNode(Concept.Model.ConceptElement,Concept.Utils.IDataStoreNode,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> to an XML node.
            This method is obsolete but kept for compatibility with Concept.Hmi 2012.
            </summary>
            <param name="element">The ConceptElement to serialize.</param>
            <param name="node">The node where the information on the factory and the data will be saved.</param>
            <param name="subjects">The subjects to use to serialize specific elements and properties of the ConceptElement.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.CreateObjectFromFile(System.String,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates and load a <see cref="T:Concept.Model.ConceptElement" /> from a file containing its serialization in XML format.
            This method is obsolete but kept for compatibility with Concept.Hmi 2012.
            </summary>
            <param name="filename">The filename of the file containing the XML serialization of the <see cref="T:Concept.Model.ConceptElement" />.</param>
            <param name="factories">The list of factories to use for the deserialization of the <see cref="T:Concept.Model.ConceptElement" />.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
            <param name="subjects">The subjects to use to deserialize specific elements and properties of the <see cref="T:Concept.Model.ConceptElement" />.</param>
            <returns>The <see cref="T:Concept.Model.ConceptElement" /> created from the xml file.</returns>
        </member>
        <member name="M:Concept.Model.ConceptElement.SaveObjectToFile(Concept.Model.ConceptElement,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves a <see cref="T:Concept.Model.ConceptElement" /> to a file which will contain its serialization in XML format.
            This method is obsolete but kept for compatibility with Concept.Hmi 2012.
            </summary>
            <param name="element">The ConceptElement to serialize</param>
            <param name="filename">The filename of the file which will contain the XML serialization of the <see cref="T:Concept.Model.ConceptElement" />.</param>
            <param name="subjects">The subjects to use to serialize specific elements and properties of the ConceptElement.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Concept.Model.ConceptElement"/> class.
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptElement.DiagnosticPropertyName">
            <summary>
            Identifies the <see cref="P:Concept.Model.ConceptElement.Diagnostic"/> property. Useful when working with the <see cref="E:Concept.Model.ConceptElement.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="P:Concept.Model.ConceptElement.Diagnostic">
            <summary>
            Gets the diagnostic of the ConceptElement. This property indicates if the ConceptElement is in a
            correct state.
            </summary>
            <value>The diagnostic of the ConceptElement.</value>
        </member>
        <member name="F:Concept.Model.ConceptElement.DiagnosticMessagePropertyName">
            <summary>
            Identifies the <see cref="P:Concept.Model.ConceptElement.DiagnosticMessage"/> property. Useful when working with the <see cref="E:Concept.Model.ConceptElement.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="P:Concept.Model.ConceptElement.DiagnosticMessage">
            <summary>
            Gets or sets the diagnostic message.
            </summary>
            <value>The diagnostic message.</value>
        </member>
        <member name="P:Concept.Model.ConceptElement.Repositories">
            <summary>
            Gets the repositories defined by the element and by any of its containers in the object tree (by recursive call).
            Repositories are used to enable links between two separate hierarchical models. 
            </summary>
            <value>The repositories.</value>
        </member>
        <member name="P:Concept.Model.ConceptElement.HasRepository">
            <summary>
            Gets a value indicating whether this instance has a repository. 
            Repositories are used to enable links between two separate hierarchical models. 
            </summary>
            <value><c>true</c> if this instance has repository; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Concept.Model.ConceptElement.AddRepository(Concept.Model.ConceptContainer)">
            <summary>
            Adds the container passed as a parameter in the repositories of this element. The repositories are used to enable links between two separate hierarchical models. 
            Adding a separate model as a repository, enables to do <see cref="T:Concept.Model.ConceptLink">links</see> to this model.
            </summary>
            <param name="container">The container to add to the repositories.</param>
            <exception caption="" cref="T:System.NotSupportedException">The container passed as a parameter is already in the repositories of this element.</exception>
        </member>
        <member name="M:Concept.Model.ConceptElement.RemoveRepository(Concept.Model.ConceptContainer)">
            <summary>
            Removes the given <see cref="T:Concept.Model.ConceptContainer"/> from the repositories of this element.
            </summary>
            <param name="container">The container.</param>
            <exception cref="T:System.NotSupportedException">The container passed as a parameter does not exist in the repositories of this element.</exception>
        </member>
        <member name="M:Concept.Model.ConceptElement.ClearRepositories">
            <summary>
            Removes all the elements added to the repositories.
            </summary>
        </member>
        <member name="P:Concept.Model.ConceptElement.Factory">
            <summary>
            Gets or sets the factory of the ConceptElement. The <see cref="T:Concept.Model.ConceptFactory">factory</see> is
            used to create the ConceptElement from a string identifying the matching factory.
            </summary>
            <value>The factory used to create the ConceptElement.</value>
        </member>
        <member name="M:Concept.Model.ConceptElement.AfterFactorySet">
            <summary>Can be used to perform an action after setting the <see cref="P:Concept.Model.ConceptElement.Factory" /> property.</summary>
        </member>
        <member name="P:Concept.Model.ConceptElement.Provider">
            <summary>
            Gets the element providing the %Factory%. 
            A provider is useful to make certain type of processes available depending on the current configuration.
            </summary>
            <value>The provider.</value>
            <exception cref="T:Concept.Utils.ConceptException">The %ConceptElement% is not provided and has no provider</exception>
        </member>
        <member name="M:Concept.Model.ConceptElement.GetProvider``1">
            <summary>
            Gets the <see cref="T:Concept.Model.ConceptFactory"/> provider of type T.
            </summary>
            <typeparam name="T">The desired type of factory provider</typeparam>
            <returns>The factory provider of type T </returns>
            <exception cref="T:Concept.Utils.ConceptException">The factory provider is not of type T</exception>
        </member>
        <member name="P:Concept.Model.ConceptElement.HasProvider">
            <summary>
            Gets a value indicating whether this instance has a factory provider. 
            A provider is useful to make certain type of processes available depending on the current configuration.
            </summary>
            <value><c>true</c> if this instance has a provider; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Concept.Model.ConceptElement.GetHasProvider``1">
            <summary>
            Indicates if the element has a factory provider of type T
            </summary>
            <typeparam name="T">The type of factory provider</typeparam>
            <returns>
              <c>true</c> if the element has a factory provider of type T, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Concept.Model.ConceptElement.RetrieveFactories(Concept.Model.ConceptFactories)">
            <summary>
            Retrieves the factories needed to deserialize the ConceptElement.
            </summary>
            <param name="factories">The factories needed and used to deserialize the ConceptElement.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.RetrieveProvidedFactories(Concept.Model.ConceptFactories,System.Predicate{Concept.Model.ConceptFactory})">
            <summary>
            Retrieves the factories of the ProvidedComponent provided by the ConceptElement, filtered by custom criteria.
            </summary>
            <param name="factories">The factories provided by the ConceptElement.</param>
            <param name="filter">A predicate that operates on a ConceptFactory, this predicate should return true to include the factory passed in argument to the factories.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.RetrieveProvidedFactories(Concept.Model.ConceptFactories,System.Type)">
            <summary>
            Retrieves the factories of ProvidedComponent provided by the ConceptElement. The instances types created by these factories have to be either the base type or a sub type of the base type.
            </summary>
            <param name="factories">The factories provided by the ConceptElement.</param>
            <param name="baseType">The base type of the element created by the factories that will be selected.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.RetrieveProvidedFactories(Concept.Model.ConceptFactories)">
            <summary>
            Retrieves the factories of ProvidedComponent provided by the ConceptElement.
            </summary>
            <param name="factories">The factories provided by the ConceptElement.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.RetrieveProvidedFactories">
            <summary>
            Retrieves the factories of ProvidedComponent provided by the ConceptElement.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptElement.RetrieveAllFactories(Concept.Model.ConceptFactories,System.Type)">
            <summary>
            Retrieves all the factories required by the ConceptElement. The instances types created by these factories have to be either the base type or a sub type of the base type.
            </summary>
            <param name="factories">The factories provided by the ConceptElement.</param>
            <param name="baseType">The base type.</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.IsFactoryValid(Concept.Model.ConceptFactory,System.Type)">
            <summary>Tests if a factory is valid for the current class, depending on the base type. This method can be overridden to dynamically change the validity of factories.</summary>
            <param name="factory">The factory to test.</param>
            <param name="baseType">The base type.</param>
            <returns>
            A <see cref="T:System.Boolean" /> that represents the validity of the factory.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptElement.RetrieveAllFactories``1(Concept.Model.ConceptFactories)">
            <summary>
            Retrieves all the factories required by the ConceptElement. The instances types created by these factories have to be either the base type T or a sub type of the base type T.
            </summary>
            <typeparam name="T">The base type T</typeparam>
            <param name="factories">The factories provided by the ConceptElement</param>
        </member>
        <member name="M:Concept.Model.ConceptElement.RetrieveAllFactories(Concept.Model.ConceptFactories)">
            <summary>
            Retrieves all the factories required by the ConceptElement.
            </summary>
            <param name="factories">The factories provided by the ConceptElement.</param>
        </member>
        <member name="P:Concept.Model.ConceptElement.IsSubjectEnabled">
            <summary>Gets a value indicating whether the subjects are enabled for this instance. In this implementation the subjects are disabled. To enable the subjects override
            this property in the elements using subjects to return <c>true</c>.</summary>
            <value>
              <c>true</c> if this instance is subject enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Concept.Model.ConceptElement.HasSpecificSubject(System.String)">
            <summary>
            Determines whether the subject passed in parameter is a specific subject of this element or its children.
            </summary>
            <param name="subject">The subject.</param>
            <returns><c>true</c> if the subject passed as parameter is a specific subject of this element or its children; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Concept.Model.ConceptElement.DeclaredSubjects">
            <summary>Gets the subjects declared with the metadata <see cref="T:Concept.Model.ConceptSerializedAttribute"/> on this concept element. Subjects are used to serialize specific parts of 
            the business model differently.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <value>The subjects.</value>
        </member>
        <member name="P:Concept.Model.ConceptElement.Subjects">
            <summary>
            Gets the subjects of this element only. Does not return the subjects of children like <see cref="P:Concept.Model.ConceptElement.AllSubjects"/> property. Subjects are used to serialize specific parts of 
            the business model differently.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <value>The subjects.</value>
        </member>
        <member name="P:Concept.Model.ConceptElement.AllSubjects">
            <summary>Gets the <see cref="P:Concept.Model.ConceptElement.Subjects" /> of this element and its children. Subjects are used to serialize specific parts of 
            the business model differently.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <value>All subjects.</value>
        </member>
        <member name="M:Concept.Model.ConceptElement.NotifySubject(Concept.Model.ConceptElement,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Notifies the new subjects from the source element to its %Container%, recursively for each <see cref="P:Concept.Model.ConceptElement.Container" /> until the tree root is reached.
            </summary>
            <param name="element">The source element.</param>
            <param name="subjects">The new subjects of the source element.</param>
            <param name="add">
            if set to <c>true</c> adds the new subject to the %Container% that does not already have them; 
            if set to <c>false</c> remove the new subject from the %Container% which contain these subjects as child subjects
            </param>
        </member>
        <member name="M:Concept.Model.ConceptElement.InitializeSubject(System.Boolean)">
            <summary>Defines the subjects used by this element from the metadata <see cref="T:Concept.Model.ConceptSerializedAttribute"/>.</summary>
            <param name="notify">if set to <c>true</c> calls the <see cref="M:Concept.Model.ConceptElement.NotifySubject(Concept.Model.ConceptElement,System.Collections.Generic.IEnumerable{System.String},System.Boolean)" /> method with <see cref="P:Concept.Model.ConceptElement.AllSubjects" />;.</param>
        </member>
        <member name="P:Concept.Model.ConceptElement.HasDefaultSubject">
            <summary>
            Gets a value indicating whether this instance has a default subject.
            </summary>
            <value><c>true</c> if this instance has default subject; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.ConceptElement.HasSubject">
            <summary>Gets a value indicating whether this instance has a subject different from the <see cref="P:Concept.Utils.ConceptUtilsUtils.DefaultSubjects">ConceptUtilsUtils.DefaultSubject</see>.</summary>
            <value>
              <c>true</c> if this instance has a subject different from the <see cref="P:Concept.Utils.ConceptUtilsUtils.DefaultSubjects">ConceptUtilsUtils.DefaultSubject</see>; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Concept.Model.ConceptElementDiagnostic">
            <summary>Represents the state of the <see cref="T:Concept.Model.ConceptElement">ConceptElement</see>.</summary>
        </member>
        <member name="F:Concept.Model.ConceptElementDiagnostic.Undefined">
            <summary>
            The undefined state
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptElementDiagnostic.Ok">
            <summary>
            The ok state
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptElementDiagnostic.Information">
            <summary>
            The information state
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptElementDiagnostic.Warning">
            <summary>
            The warning state
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptElementDiagnostic.Error">
            <summary>
            The error state
            </summary>
        </member>
        <member name="T:Concept.Model.ConceptVisibleAttribute">
            <summary>
            ConceptVisibleAttribute is a class attribute which defines if the
            linked ConceptFactory is displayed when adding new object to a 
            ConceptDynamicList.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptVisibleAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptVisibleAttribute"/> class.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="P:Concept.Model.ConceptVisibleAttribute.IsVisible">
            <summary>
            Gets or sets a value indicating whether this instance is visible.
            </summary>
            <value><c>true</c> if this instance is visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Concept.Model.ConceptViewVisibleAttribute">
            <summary>
            ConceptVisibleInEditorAttribute is a class or field attribute which defines 
            if the matching element must be editable in the default view of Concept editor.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptViewVisibleAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptViewVisibleAttribute"/> class.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="P:Concept.Model.ConceptViewVisibleAttribute.IsVisible">
            <summary>
            Gets a value indicating whether this instance is visible.
            </summary>
            <value><c>true</c> if this instance is visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Concept.Model.BaseConceptNameAttribute">
            <summary>
            BaseConceptNameAttribute is a class attribute which defines
            the path of the ConceptElement. The path is used in categorized
            views.
            </summary>
        </member>
        <member name="P:Concept.Model.BaseConceptNameAttribute.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Concept.Model.ConceptNameAttribute">
            <summary>
            ConceptNameAttribute is the standard implementation of 
            BaseConceptCategoryAttribute
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptNameAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Concept.Model.ConceptNameAttribute.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Concept.Model.IntlConceptNameAttribute">
            <summary>
            IntlConceptNameAttribute is the Intl implementation of 
            BaseConeptCategoryAttribute
            </summary>
        </member>
        <member name="M:Concept.Model.IntlConceptNameAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.IntlConceptNameAttribute"/> class.
            </summary>
            <param name="intlId">The intl id.</param>
            <param name="defaultName">The default name.</param>
        </member>
        <member name="P:Concept.Model.IntlConceptNameAttribute.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Concept.Model.BaseConceptCategoryAttribute">
            <summary>
            BaseConceptCategoryAttribute is a class attribute which defines
            the path of the ConceptElement. The path is used in categorized
            views.
            </summary>
        </member>
        <member name="P:Concept.Model.BaseConceptCategoryAttribute.Category">
            <summary>
            Gets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="T:Concept.Model.ConceptCategoryAttribute">
            <summary>
            ConceptCategoryAttribute is the standard implementation of 
            BaseConceptCategoryAttribute
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptCategoryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptCategoryAttribute"/> class.
            </summary>
            <param name="category">The category.</param>
        </member>
        <member name="P:Concept.Model.ConceptCategoryAttribute.Category">
            <summary>
            Gets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="T:Concept.Model.IntlConceptCategoryAttribute">
            <summary>
            IntlConceptCategoryAttribute is the Intl implementation of 
            BaseConeptCategoryAttribute
            </summary>
        </member>
        <member name="M:Concept.Model.IntlConceptCategoryAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.IntlConceptCategoryAttribute"/> class.
            </summary>
            <param name="intlId">The intl id.</param>
            <param name="defaultCategory">The default category.</param>
        </member>
        <member name="P:Concept.Model.IntlConceptCategoryAttribute.Category">
            <summary>
            Gets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="T:Concept.Model.ConceptFactoryIdAttribute">
            <summary>
            ConceptFactoryIdAttribute allow to customize the name of the factory
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptFactoryIdAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptFactoryIdAttribute"/> class.
            </summary>
            <param name="factoryId">The factory id.</param>
        </member>
        <member name="P:Concept.Model.ConceptFactoryIdAttribute.FactoryId">
            <summary>
            Gets the factory id.
            </summary>
            <value>The factory id.</value>
        </member>
        <member name="T:Concept.Model.BaseConceptDetailsAttribute">
            <summary>
            BaseConceptDetailsAttribute is a class attribute which defines
            the details of the ConceptElement. 
            </summary>
        </member>
        <member name="P:Concept.Model.BaseConceptDetailsAttribute.Details">
            <summary>
            Gets the details.
            </summary>
            <value>The details.</value>
        </member>
        <member name="T:Concept.Model.ConceptDetailsAttribute">
            <summary>
            ConceptDetailsAttribute is the standard implementation of
            BaseConceptDetailsAttribute.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptDetailsAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptDetailsAttribute"/> class.
            </summary>
            <param name="details">The details.</param>
        </member>
        <member name="P:Concept.Model.ConceptDetailsAttribute.Details">
            <summary>
            Gets the details.
            </summary>
            <value>The details.</value>
        </member>
        <member name="T:Concept.Model.IntlConceptDetailsAttribute">
            <summary>
            IntlConceptDetailsAttribute is the Intl implementation of
            BaseConceptDetailsAttribute.
            </summary>
        </member>
        <member name="M:Concept.Model.IntlConceptDetailsAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.IntlConceptDetailsAttribute"/> class.
            </summary>
            <param name="intlId">The intl id.</param>
            <param name="intlDefaultText">The intl default text.</param>
        </member>
        <member name="P:Concept.Model.IntlConceptDetailsAttribute.Details">
            <summary>
            Gets the details.
            </summary>
            <value>The details.</value>
        </member>
        <member name="T:Concept.Model.ConceptSmallImageAttribute">
            <summary>
            ConceptSmallImageAttribute is a class attribute which 
            defines a small image for a ConceptElement.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptSmallImageAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptSmallImageAttribute"/> class.
            </summary>
            <param name="assemblyType">Type of the assembly.</param>
            <param name="resourceName">Name of the resource.</param>
        </member>
        <member name="T:Concept.Model.ConceptLargeImageAttribute">
            <summary>
            ConceptLargeImageAttribute is a class attribute which 
            defines a large image for a ConceptElement.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptLargeImageAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptLargeImageAttribute"/> class.
            </summary>
            <param name="assemblyType">Type of the assembly.</param>
            <param name="resourceName">Name of the resource.</param>
        </member>
        <member name="T:Concept.Model.ConceptVectorImageAttribute">
            <summary>
            ConceptVectorImageAttribute is a class attribute which 
            defines a vector image for a ConceptElement.
            The vector image will be looked in the Application ressource dictionary (WPF)
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptVectorImageAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptVectorImageAttribute"/> class.
            </summary>
            <param name="resourceName">Name of the resource.</param>
        </member>
        <member name="T:Concept.Model.ConceptRootAttribute">
            <summary>
            ConceptRootAttribute is a class attribute which defines
            if the class is a root. Only root can be instanciated
            in Concept Editor as top level ConceptElement.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptRootAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptRootAttribute"/> class.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="P:Concept.Model.ConceptRootAttribute.IsRoot">
            <summary>
            Gets or sets a value indicating whether this instance is root.
            </summary>
            <value><c>true</c> if this instance is root; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Concept.Model.ConceptSerializedAttribute">
            <summary>
            ConceptSerializedAttribute is a property attribute which involves
            that the property will automatically be serialized with the properties
            of the owner.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptSerializedAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptSerializedAttribute"/> class.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptSerializedAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptSerializedAttribute"/> class.
            </summary>
            <param name="subject">The subject.</param>
        </member>
        <member name="M:Concept.Model.ConceptSerializedAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptSerializedAttribute"/> class.
            </summary>
            <param name="index">The index.</param>
            <param name="subject">The subject.</param>
        </member>
        <member name="P:Concept.Model.ConceptSerializedAttribute.Index">
            <summary>
            Gets or sets the index.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:Concept.Model.ConceptSerializedAttribute.Subject">
            <summary>
            Gets the subject.
            </summary>
            <value>The subject.</value>
        </member>
        <member name="T:Concept.Model.ConceptAutoCreateAttribute">
            <summary>
            ConceptAutoCreate is a property attribute which allow
            to automatically create ConceptElement properties. The mecanism
            use the default factory to create the instance. As default, the 
            name will be the name of the property.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptAutoCreateAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptAutoCreateAttribute"/> class.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptAutoCreateAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptAutoCreateAttribute"/> class.
            </summary>
            <param name="mustCreate">A boolean indicating if the property will be automatically instantiated.</param>
        </member>
        <member name="M:Concept.Model.ConceptAutoCreateAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptAutoCreateAttribute"/> class.
            </summary>
            <param name="name">The name that will be used by the instantiated object.</param>
        </member>
        <member name="M:Concept.Model.ConceptAutoCreateAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptAutoCreateAttribute"/> class.
            </summary>
            <param name="name">The name that will be used by the instantiated object.</param>
            <param name="mustCreate">A boolean indicating if the property will be automatically instantiated.</param>
        </member>
        <member name="P:Concept.Model.ConceptAutoCreateAttribute.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Concept.Model.ConceptAutoCreateAttribute.MustCreate">
            <summary>
            Gets the boolean indicating if the property will be instantiated.
            </summary>
        </member>
        <member name="T:Concept.Model.ConceptAutoCreateDefault">
            <summary>
            This attribute is used to indicate if a <see cref="T:Concept.Model.ConceptComponent"/> must be auto created by default,
            even if the attribute <see cref="T:Concept.Model.ConceptAutoCreateAttribute"/> is not used.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptAutoCreateDefault.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptAutoCreateDefault"/> class.
            </summary>
            <param name="mustAutoCreate">A boolean indicating if the properties of type ConceptComponent will be automatically instantiated.</param>
        </member>
        <member name="P:Concept.Model.ConceptAutoCreateDefault.MustAutoCreate">
            <summary>
            Gets the boolean indicating if the property will be instantiated.
            </summary>
        </member>
        <member name="T:Concept.Model.ConceptDefaultValueAttribute">
            <summary>
            ConceptDefaultValue is a property attribute which defines
            the default value of the property of the ConceptElement.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptDefaultValueAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptDefaultValueAttribute"/> class.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="P:Concept.Model.ConceptDefaultValueAttribute.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="M:Concept.Model.BaseConceptProvidedComponentAttribute.#ctor(System.Type,System.Boolean,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptProvidedComponentAttribute"/> class.
            </summary>
            <param name="providedComponentType">The type of the provided component.</param>
            <param name="inherited">Defines if this component will be provided by all inheriting classes of the provider.</param>
            <param name="defaultDisplayFormat">Define the display format of the factory displayed name in ConceptListEditors. The display format uses the DisplayName of the provider as parameter {0} and the display name of the factory as parameter {1}</param>
        </member>
        <member name="M:Concept.Model.BaseConceptProvidedComponentAttribute.Factories(Concept.Model.ConceptElement)">
            <summary>
            Creates the factory.
            </summary>
            <param name="owner">The owner.</param>
            <returns>ConceptProvidedFactory.</returns>
        </member>
        <member name="P:Concept.Model.BaseConceptProvidedComponentAttribute.KeyDisplayFormat">
            <summary>
            Gets the intl key of the display format
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.BaseConceptProvidedComponentAttribute.DefaultDisplayFormat">
            <summary>
            Gets the intl default text of the display format.
            </summary>
            <value>The display format uses the DisplayName of the provider as parameter {0} and the display name of the factory as parameter {1}.</value>
        </member>
        <member name="P:Concept.Model.BaseConceptProvidedComponentAttribute.Inherited">
            <summary>
            Gets or sets if the sub classes must also provide the component.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Concept.Model.ConceptProvidedComponentAttribute">
            <summary>
            ConceptProvideAttribute is a class attribute which associates
            a ConceptProvidedComponent to a ConceptComponent.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptProvidedComponentAttribute.#ctor(System.Type,System.Boolean,System.String,System.String)">
            <summary>
            Creates a new ConceptProvidedComponent attribute
            </summary>
            <param name="providedComponentType">The type of the provided component.</param>
            <param name="inherited">Defines if this component will be provided by all inheriting classes of the provider.</param>
            <param name="keyDisplayFormat">Define the Intl Key that will be use for the factory displayed name in ConceptListEditors.</param>
            <param name="defaultDisplayFormat">Define the display format of the factory displayed name in ConceptListEditors. The display format uses the DisplayName of the provider as parameter {0} and the display name of the factory as parameter {1}</param>
        </member>
        <member name="M:Concept.Model.ConceptProvidedComponentAttribute.#ctor(System.Type,System.Boolean,System.String)">
            <summary>
            Creates a new ConceptProvidedComponent attribute
            </summary>
            <param name="providedComponentType">The type of the provided component.</param>
            <param name="inherited">Defines if this component will be provided by all inheriting classes of the provider.</param>
            <param name="defaultDisplayFormat">Define the display format of the factory displayed name in ConceptListEditors. The display format uses the DisplayName of the provider as parameter {0} and the display name of the factory as parameter {1}</param>
        </member>
        <member name="M:Concept.Model.ConceptProvidedComponentAttribute.Factories(Concept.Model.ConceptElement)">
            <summary>
            Creates the factory.
            </summary>
            <param name="owner">The owner.</param>
            <returns>ConceptProvidedFactory.</returns>
        </member>
        <member name="T:Concept.Model.ConceptProvidedHierarchyAttribute">
            <summary>
            ConceptProvideHierarchy is a class attribute which allow to provide a hierarchy of component, meaning non abstract subclasses.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptProvidedHierarchyAttribute.#ctor(System.Type,System.Boolean,System.String,System.String)">
            <summary>
            Creates a new ConceptProvidedHierarchy attribute
            </summary>
            <param name="providedComponentType">The type of the provided component.</param>
            <param name="inherited">Defines if this component will be provided by all inheriting classes of the provider.</param>
            <param name="keyDisplayFormat">Define the Intl Key that will be use for the factory displayed name in ConceptListEditors.</param>
            <param name="defaultDisplayFormat">Define the display format of the factory displayed name in ConceptListEditors. The display format uses the DisplayName of the provider as parameter {0} and the display name of the factory as parameter {1}</param>
        </member>
        <member name="M:Concept.Model.ConceptProvidedHierarchyAttribute.#ctor(System.Type,System.Boolean,System.String)">
            <summary>
            Creates a new ConceptProvidedHierarchy attribute
            </summary>
            <param name="providedComponentType">The type of the provided component.</param>
            <param name="inherited">Defines if this component will be provided by all inheriting classes of the provider.</param>
            <param name="defaultDisplayFormat">Define the display format of the factory displayed name in ConceptListEditors. The display format uses the DisplayName of the provider as parameter {0} and the display name of the factory as parameter {1}</param>
        </member>
        <member name="M:Concept.Model.ConceptProvidedHierarchyAttribute.Factories(Concept.Model.ConceptElement)">
            <summary>
            Creates the factory.
            </summary>
            <param name="owner">The owner.</param>
            <returns>ConceptProvidedFactory.</returns>
        </member>
        <member name="T:Concept.Model.ConceptViewAttribute">
            <summary>
            ConceptViewAttribute in a class attribute which associates Model/View, a specific
            subject could be specified.
            ModelPropertyName parameter is obsolete when using this attribute on a Property
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptViewAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptViewAttribute"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Concept.Model.ConceptViewAttribute.#ctor(System.Type,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptViewAttribute"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="viewPropertyName">Name of the view property.</param>
            <param name="modelPropertyName">Name of the model property.</param>
            <param name="subject">The subject.</param>
        </member>
        <member name="P:Concept.Model.ConceptViewAttribute.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Concept.Model.ConceptViewAttribute.ViewPropertyName">
            <summary>
            Gets the name of the view property.
            </summary>
            <value>The name of the view property.</value>
        </member>
        <member name="P:Concept.Model.ConceptViewAttribute.ModelPropertyName">
            <summary>
            Gets the name of the model property.
            </summary>
            <value>The name of the model property.</value>
        </member>
        <member name="P:Concept.Model.ConceptViewAttribute.Subject">
            <summary>
            Gets the subject.
            </summary>
            <value>The subject.</value>
        </member>
        <member name="T:Concept.Model.ConceptViewPropertyAttribute">
            <summary>
            ConceptPropertyViewParameterAttribute in a property or class attribute 
            which set parameters to the view used in default concept editor
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptViewPropertyAttribute.#ctor(System.String,System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptViewPropertyAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="subject">The subject.</param>
        </member>
        <member name="P:Concept.Model.ConceptViewPropertyAttribute.ViewPropertyName">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Concept.Model.ConceptViewPropertyAttribute.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Concept.Model.ConceptViewPropertyAttribute.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>The subject.</value>
        </member>
        <member name="P:Concept.Model.ConceptViewPropertyAttribute.IsValid">
            <summary>
            Gets or sets a value indicating whether this instance is valid.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Concept.Model.ConceptViewPropertyIntlAttribute">
            <summary>
            ConceptViewPropertyIntlAttribute in a property or class attribute 
            which set parameters to the view used in default concept editor
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptViewPropertyIntlAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptViewPropertyIntlAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="intlKey">The intl key.</param>
            <param name="defaultValue">The default value.</param>
            <param name="subject">The subject.</param>
        </member>
        <member name="P:Concept.Model.ConceptViewPropertyIntlAttribute.ViewPropertyName">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Concept.Model.ConceptViewPropertyIntlAttribute.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Concept.Model.ConceptViewPropertyIntlAttribute.IntlKey">
            <summary>
            Gets or sets the intl key.
            </summary>
            <value>The intl key.</value>
        </member>
        <member name="P:Concept.Model.ConceptViewPropertyIntlAttribute.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>The subject.</value>
        </member>
        <member name="P:Concept.Model.ConceptViewPropertyIntlAttribute.IsValid">
            <summary>
            Gets or sets a value indicating whether this instance is valid.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Concept.Model.ConceptViewPropertyBindingAttribute">
            <summary>
            ConceptPropertyViewParameterAttribute in a property or class attribute 
            which set parameters to the view used in default concept editor
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptViewPropertyBindingAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptViewPropertyBindingAttribute"/> class.
            </summary>
            <param name="viewPropertyName">Name of the view property.</param>
            <param name="modelPropertyName">Name of the model property.</param>
            <param name="subject">The subject.</param>
        </member>
        <member name="P:Concept.Model.ConceptViewPropertyBindingAttribute.ViewPropertyName">
            <summary>
            Gets the name of the view property.
            </summary>
            <value>The name of the view property.</value>
        </member>
        <member name="P:Concept.Model.ConceptViewPropertyBindingAttribute.ModelPropertyName">
            <summary>
            Gets or sets the name of the model property.
            </summary>
            <value>The name of the model property.</value>
        </member>
        <member name="P:Concept.Model.ConceptViewPropertyBindingAttribute.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>The subject.</value>
        </member>
        <member name="P:Concept.Model.ConceptViewPropertyBindingAttribute.IsValid">
            <summary>
            Gets or sets a value indicating whether this instance is valid.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Concept.Model.ConceptEditorAttribute">
            <summary>
            EditorAttribute is a class attribute which defines
            the default editor used when the EditProperties() method
            is called.
            </summary>
            <remarks>Kept for Concept.Hmi 2012 Compatibility</remarks>
        </member>
        <member name="M:Concept.Model.ConceptEditorAttribute.#ctor(System.Type,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptEditorAttribute"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="types">The types.</param>
        </member>
        <member name="P:Concept.Model.ConceptEditorAttribute.Types">
            <summary>
            Gets the types.
            </summary>
            <value>The types.</value>
        </member>
        <member name="T:Concept.Model.ConceptComponent">
            <summary>Represents the base class for all the elements of the trade domain. Each component class of the user domain model should inherit from this class to use the
            ConceptModel integrated services.</summary>
        </member>
        <member name="P:Concept.Model.ConceptComponent.None">
            <summary>Gets the None <see cref="T:Concept.Model.ConceptComponent" />. The none component is used to set a link to null.</summary>
            <value>The None <see cref="T:Concept.Model.ConceptComponent" />.</value>
        </member>
        <member name="M:Concept.Model.ConceptComponent.WriteTo(Concept.Utils.IDataStoreNode)">
            <summary>Serializes all nested properties marked with the <see cref="T:Concept.Model.ConceptSerializedAttribute"/> for value types or <see cref="T:Concept.Model.ConceptAutoCreateAttribute"/> for object types. 
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">Node to save the data of the ConceptElement.</param>
        </member>
        <member name="M:Concept.Model.ConceptComponent.WriteTo(Concept.Utils.IDataStoreNode,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Serializes all nested properties marked with the <see cref="T:Concept.Model.ConceptSerializedAttribute"/> for value types or <see cref="T:Concept.Model.ConceptAutoCreateAttribute"/> for object types. 
            The serialization of specific nested properties can be conditional based on a subject.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">Node to save the data of the ConceptComponent.</param>
            <param name="subjects">The subjects to use to serialize specific elements and properties of the <see cref="T:Concept.Model.ConceptComponent" />.</param>
        </member>
        <member name="M:Concept.Model.ConceptComponent.GetHashCode(System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Gets a hash code that represents the serializable properties of this element. This hash code may change if the instance has changed between two
            calls of this function. This hash code is not unique for an instance.</summary>
            <param name="recursive">Defines if the hash also must represents the nested items of the instance</param>
            <param name="subjects">The subjects to use to choose the elements and properties to include to the hash</param>
            <returns>
            A <see cref="T:System.String" /> that represents the instance.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptComponent.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector)">
            <summary>Read all serialized properties of this ConceptComponent and its contained elements from an <see cref="T:Concept.Utils.IDataStoreNode">IDataStoreNode</see>.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The node containing the data of the ConceptComponent.</param>
            <param name="factories">The list of factories to use for the deserialization of the ConceptComponent.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
        </member>
        <member name="M:Concept.Model.ConceptComponent.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Read all the properties serialized with the specific subjects for this ConceptComponent and its contained element from a <see cref="T:Concept.Utils.IDataStoreNode">IDataStoreNode</see>.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The node containing the data of the ConceptElement.</param>
            <param name="factories">The list of factories to use for the deserialization of the ConceptComponent.</param>
            <param name="messageCollector">The message collector that collects error occurring during the process.</param>
            <param name="subjects">The subject to use to deserialize specific elements and properties of the <see cref="T:Concept.Model.ConceptComponent" />.</param>
        </member>
        <member name="M:Concept.Model.ConceptComponent.SetDefaultValues">
            <summary>
            Sets the properties with their default value defined with the <see cref="T:Concept.Model.ConceptDefaultValueAttribute"/>, if the property doesn't have the <see cref="T:Concept.Model.ConceptDefaultValueAttribute"/> defined it is ignored. 
            Also calls the %SetDefaultValues% method of each child element.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptComponent.Clear">
            <summary>Clears the component by setting the default values (calls %SetDefaultValues%) and clearing all the contained element.
            DefaultValues can be set by using the <see cref="T:Concept.Model.ConceptDefaultValueAttribute"/> attribute.</summary>
        </member>
        <member name="M:Concept.Model.ConceptComponent.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            When overriding this method, always call the base.Dispose() at the end of your implementation instead of at the beginning.
            </summary>
            <param name="disposeManagedResources"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Concept.Model.ConceptContainer">
            <summary>Represents the base class of all <see cref="T:Concept.Model.ConceptElement" /> that are composed by other <see cref="T:Concept.Model.ConceptElement" />. To manage this composition all child elements are contained
            in an internal list of <see cref="T:Concept.Model.ConceptContainer" /> and each element can easily access their container with the <see cref="P:Concept.Model.ConceptElement.Container">Container</see>
            property. This class facilitates the creation of complex and powerful hierarchical models.</summary>
        </member>
        <member name="M:Concept.Model.ConceptContainer.GetPropertyInfos(System.Type)">
            <summary>Gets the property info of the specified type.</summary>
            <param name="type">The specified type.</param>
            <returns>The list containing all the property info of the specified type.</returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.GetPropertyInfosToSerialize(System.Type)">
            <summary>Gets the property info for the serialization of the specified type.</summary>
            <param name="type">The specified type of element.</param>
            <returns>The property infos of properties to serialize ordered by subject. The return type is a dictionary regrouping the lists of property info by subject.</returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.RetrieveInfo(System.Type)">
            <summary>
            Retrieves the property info of the specified type.
            </summary>
            <param name="type">The specified type.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.GetPropertyInfo(System.Type,Concept.Model.ConceptElement)">
            <summary>
            Gets the property info of the element.
            </summary>
            <param name="containerType">The type of the container of the element.</param>
            <param name="element">The element.</param>
            <returns>PropertyInfo.</returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptContainer"/> class.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptContainer.OnPathChanged">
            <summary>Called when the <see cref="P:Concept.Model.ConceptElement.Path">Path</see> property changed</summary>
        </member>
        <member name="T:Concept.Model.ConceptContainer.Indexer">
            <summary>
            Represents the indexer of the internal list of <see cref="T:Concept.Model.ConceptElement"/>.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptContainer.Indexer.#ctor(Concept.Model.ConceptContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptContainer.Indexer"/> class.
            </summary>
            <param name="owner">The owner of the <see cref="T:Concept.Model.ConceptContainer.Indexer"/>.</param>
        </member>
        <member name="P:Concept.Model.ConceptContainer.Indexer.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Concept.Model.ConceptElement"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:Concept.Model.ConceptContainer.Indexer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.IsNameUnique(Concept.Model.ConceptElement,System.String)">
            <summary>
            Determines whether the <paramref name="name"/> is already used in the internal list. The name must be unique.
            </summary>
            <param name="element">The <see cref="T:Concept.Model.ConceptElement"/> whose name has been or will be set with <paramref name="name"/> if unique.</param>
            <param name="name">The name to verify.</param>
            <returns>
            	<c>true</c> if the name is not used in the list; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.Find(System.String)">
            <summary>Finds the <see cref="T:Concept.Model.ConceptElement" /> matching the <paramref name="path"/> in the hierarchical model.</summary>
            <param name="path">The path of the searched <see cref="T:Concept.Model.ConceptElement" />.</param>
            <returns>Returns a <see cref="T:Concept.Model.ConceptElement" /> if the path is valid; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.CheckNameUniqueness(Concept.Model.ConceptElement,System.String)">
            <summary>
            Checks if the name of the <see cref="T:Concept.Model.ConceptElement" /> is already used in the internal list. The name must be unique. 
            If the name is already used, a <see cref="T:Concept.Utils.ConceptException" /> is thrown.
            </summary>
            <param name="item">The <see cref="T:Concept.Model.ConceptElement" /> which want to know if the name is unique.</param>
            <param name="name">The name to verify.</param>
            <exception cref="T:Concept.Utils.ConceptException"> Duplicate name exception</exception>
        </member>
        <member name="M:Concept.Model.ConceptContainer.GenerateUniqueName(Concept.Model.ConceptElement,System.String)">
            <summary>
            Generates a unique identifier which can be used by a <see cref="T:Concept.Model.ConceptElement"/> in order to be added to the <see cref="T:Concept.Model.ConceptContainer"/>
            </summary>
            <param name="item">The <see cref="T:Concept.Model.ConceptElement"/> which want to know if the name is unique.</param>
            <param name="baseName">A base name used to generate the unique name.</param>
            <returns>Returns a unique name.</returns>
        </member>
        <member name="P:Concept.Model.ConceptContainer.Count">
            <summary>Gets the count of ConceptElement in the internal list.</summary>
            <value>The count of ConceptElement.</value>
        </member>
        <member name="P:Concept.Model.ConceptContainer.Items">
            <summary>
            Gets the indexer for each <see cref="T:Concept.Model.ConceptElement" /> that has been added to the internal list of the instance.
            </summary>
            <value>The items added to the internal list of the instance.</value>
        </member>
        <member name="P:Concept.Model.ConceptContainer.AllNestedItems">
            <summary>
            Gets the list of <see cref="T:Concept.Model.ConceptElement"/> that have been added to the internal list, 
            recursively for each <see cref="T:Concept.Model.ConceptContainer"/>.
            </summary>
            <value>All the nested items of the instance.</value>
        </member>
        <member name="M:Concept.Model.ConceptContainer.IndexOf(Concept.Model.ConceptElement)">
            <summary>
            Retrieves the index of the <see cref="T:Concept.Model.ConceptElement"/> in the internal list.
            </summary>
            <param name="item">The item to find in the internal list.</param>
            <returns>Returns the index of the <see cref="T:Concept.Model.ConceptElement"/> if it has been found in the internal list; otherwise, <c>-1</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.Contains(Concept.Model.ConceptElement)">
            <summary>
            Determines whether the internal list contains the <see cref="T:Concept.Model.ConceptElement"/>.
            </summary>
            <param name="item">The item to verify.</param>
            <returns>
            	<c>true</c> if the internal list contains the <see cref="T:Concept.Model.ConceptElement"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.InternalRemove(Concept.Model.ConceptElement)">
            <summary>
            Removes the specified item from the internal list of the <see cref="T:Concept.Model.ConceptContainer"/>.
            </summary>
            <param name="item">The item to remove</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.InternalAdd(Concept.Model.ConceptElement)">
            <summary>
            Adds the specified item to the internal list of the <see cref="T:Concept.Model.ConceptContainer"/>.
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.FindByName(System.String)">
            <summary>Finds the <see cref="T:Concept.Model.ConceptElement" /> matching the <paramref name="name"/> in the hierarchical model.</summary>
            <param name="name">The name of the searched <see cref="T:Concept.Model.ConceptElement" />.</param>
            <returns>&gt;Returns a <see cref="T:Concept.Model.ConceptElement" /> if the name is valid; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.Add(Concept.Model.ConceptElement)">
            <summary>
            Adds the specified item to the internal list of the <see cref="T:Concept.Model.ConceptContainer"/>. The elements contained in the internal list are the children of this instance in the hierarchical model.
            Each child must have a unique name for identification and serialization see "Manual creation of a ConceptComponent" in <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DesigningAndImplementingAModel.html"/>
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.AddNew(Concept.Model.ConceptFactory,System.String)">
            <summary>
            Creates a new instance of a <see cref="T:Concept.Model.ConceptElement"/> by using the <see cref="T:Concept.Model.ConceptFactory"/> and
            adds it to the internal list of the <see cref="T:Concept.Model.ConceptContainer"/>. The elements contained in the internal list are the children of this instance in the hierarchical model.
            Each child must have a unique name for identification and serialization see "Manual creation of a ConceptComponent" in <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DesigningAndImplementingAModel.html"/>
            </summary>
            <param name="factory">The factory used to create the new instance.</param>
            <param name="name">The name of the new item. If this name is already used throughout the internal list, an exception will be thrown.</param>
            <returns>Returns the new item that has been added.</returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.AddNew(Concept.Model.ConceptFactory)">
            <summary>
            Creates a new instance of a <see cref="T:Concept.Model.ConceptElement"/> based object with the <see cref="T:Concept.Model.ConceptFactory"/> and
            adds it to the internal list of the <see cref="T:Concept.Model.ConceptContainer"/>. The elements contained in the internal list are the children of this instance in the hierarchical model.
            </summary>
            <param name="factory">The factory used to create the new instance.</param>
            <returns>Returns the new item that has been added.</returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.AddNew``1(System.String)">
            <summary>
            Creates a new instance of a <see cref="T:Concept.Model.ConceptElement" /> based object with the <see cref="T:Concept.Model.ConceptFactory" /> and
            adds it to the internal list of the <see cref="T:Concept.Model.ConceptContainer" />. The elements contained in the internal list are the children of this instance in the hierarchical model.
            </summary>
            <typeparam name="T">The type of the new <see cref="T:Concept.Model.ConceptElement" /> to instanciate.</typeparam>
            <param name="name">The name of the new item. If this name is already used throughout the internal list, an exception will be thrown.</param>
            <returns>Returns the new item that has been added.</returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.AddNew``1">
            <summary>
            Creates a new instance of a <see cref="T:Concept.Model.ConceptElement"/> based object with the <see cref="T:Concept.Model.ConceptFactory"/> and
            adds it to the internal list of the <see cref="T:Concept.Model.ConceptContainer"/>. The elements contained in the internal list are the children of this instance in the hierarchical model.
            </summary>
            <typeparam name="T">The type of the new <see cref="T:Concept.Model.ConceptElement"/> to instanciate.</typeparam>
            <returns>Returns the new item that has been added.</returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.Insert(System.Int32,Concept.Model.ConceptElement)">
            <summary>
            Inserts the specified <see cref="T:Concept.Model.ConceptElement"/> at the specified index in the internal list.
            </summary>
            <param name="index">The index where the item must be added.</param>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.Remove(Concept.Model.ConceptElement)">
            <summary>
            Removes the specified item of the internal list. The item will be disposed if it implements <see cref="T:System.IDisposable"/>.
            </summary>
            <param name="item">The item to remove.</param>
            <returns></returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.Remove(Concept.Model.ConceptElement,System.Boolean)">
            <summary>
            Removes the specified item from the internal list.
            </summary>
            <param name="item">The item to remove.</param>
            <param name="dispose">if set to <c>true</c>, the item will be dispose if it implements <see cref="T:System.IDisposable"/>.</param>
            <returns>Returns <c>true</c> if the item could be removed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.RemoveAt(System.Int32)">
            <summary>
            Removes the element positioned at the specified index in the internal list. The item will be disposed if it implements <see cref="T:System.IDisposable"/>.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.Clear">
            <summary>Clears the component by setting the default values (calls %SetDefaultValues%).</summary>
            DefaultValues can be set by using the <see cref="T:Concept.Model.ConceptDefaultValueAttribute"/> attribute.
        </member>
        <member name="M:Concept.Model.ConceptContainer.Move(System.Int32,System.Int32)">
            <summary>
            Moves an item in the internal list of the <see cref="T:Concept.Model.ConceptContainer"/>.
            </summary>
            <param name="sourceIndex">The index of where the item to move is positioned</param>
            <param name="destinationIndex">The index of where the item has to be moved</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.CanAdd(Concept.Model.ConceptElement,System.String@)">
            <summary>
            Determines whether this instance can add the specified item in its internal list.
            </summary>
            <param name="item">The item.</param>
            <param name="message">The message that contains errors occurring during the process.</param>
            <returns><c>true</c> if this instance can add the specified item in its internal list; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.CanAccept(Concept.Model.ConceptFactory)">
            <summary>
            Determines whether this instance can accept an object with the specified factory in its internal list.
            </summary>
            <param name="item">The factory.</param>
            <returns>
            	<c>true</c> if this instance can accept the specified factory; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="E:Concept.Model.ConceptContainer.Filter">
            <summary>
            Occurs when a filter on the <see cref="T:Concept.Model.ConceptFactory"/> must be done.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptContainer.RetrieveFactories(Concept.Model.ConceptFactories)">
            <summary>Retrieves the factories needed to deserialize the ConceptElement.</summary>
            <param name="factories">The factories needed and used to deserialize the ConceptElement.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.IsFactoryValid(Concept.Model.ConceptFactory,System.Type)">
            <summary>Tests if a factory is valid for the current class, depending on the base type. This method can be overridden to dynamically change the validity of factories.</summary>
            <param name="factory">The factory to test.</param>
            <param name="baseType">The base type.</param>
            <returns>
            A <see cref="T:System.Boolean" /> that represents the validity of the factory.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.RetrieveProvidedFactories(Concept.Model.ConceptFactories,System.Predicate{Concept.Model.ConceptFactory})">
            <summary>
            Retrieves the factories of provided by the ConceptElement, filtered by custom criteria. 
            Factories can be provided by a ConceptElement by defining <see cref="T:Concept.Model.ConceptProvidedComponentAttribute"/> metadata on its class definition.
            </summary>
            <param name="factories">The factories provided by the ConceptElement.</param>
            <param name="filter">A predicate that operates on a ConceptFactory, this predicate should return true to include the factory passed in argument to the factories.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.SetDefaultValues">
            <summary>
            Sets the default values by calling the %SetDefaultValues% method on each elements of the internal list.
            DefaultValues can be set by using the <see cref="T:Concept.Model.ConceptDefaultValueAttribute"/> attribute.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptContainer.WriteTo(Concept.Utils.IDataStoreNode)">
            <summary>
            Saves a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> to a <see cref="T:Concept.Utils.IDataStoreNode">node</see>. In this implementation only the properties are written.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The node where the data will be saved.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.WriteTo(Concept.Utils.IDataStoreNode,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> with specific subjects to a <see cref="T:Concept.Utils.IDataStoreNode">node</see>. In this implementation only the properties are written.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The node where the data will be saved.</param>
            <param name="subjects">The subjects to use to serialize specific elements and properties of the <see cref="T:Concept.Model.ConceptContainer" />.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.WritePropertiesOfSubject(Concept.Utils.IDataStoreNode,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes all properties containing the specified subjects in a <see cref="T:Concept.Utils.IDataStoreNode">node</see>.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The node.</param>
            <param name="subjects">The subjects to use to serialize specific properties of the <see cref="T:Concept.Model.ConceptContainer" />.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.GetHashCode(System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Gets a hash code that represents the serialized properties of this element. This hash code may change if the instance has changed between two
            calls of this function. This hash code is not unique for an instance.</summary>
            <param name="recursive">Defines if the hash also must represents the nested items of the instance</param>
            <param name="subjects">The subjects to use to choose the elements and properties to include to the hash</param>
            <returns>
            A <see cref="T:System.String" /> that represents the serialized properties of this instance.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.Write(Concept.Utils.IDataStoreNode,Concept.Model.BaseConceptPropertyInfo)">
            <summary>
            Writes a property in the specified <see cref="T:Concept.Utils.IDataStoreNode">node</see>.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The node to write the property in.</param>
            <param name="property">The property info.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector)">
            <summary>
            Loads a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> from a <see cref="T:Concept.Utils.IDataStoreNode">node</see>. In this implementation only the properties are read.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The node containing the data of the <see cref="T:Concept.Model.ConceptElement" />.</param>
            <param name="factories">The list of factories to use for the deserialization of the <see cref="T:Concept.Model.ConceptElement" />.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> with specific subjects from a <see cref="T:Concept.Utils.IDataStoreNode">node</see>. In this implementation only the properties are read.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The node containing the data of the <see cref="T:Concept.Model.ConceptElement" />.</param>
            <param name="factories">The list of factories to use for the deserialization of the <see cref="T:Concept.Model.ConceptElement" />.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
            <param name="subjects">The subjects to use to deserialize specific elements and properties of the <see cref="T:Concept.Model.ConceptElement" />.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.Read(Concept.Utils.IDataStoreNode,Concept.Utils.IMessageCollector,Concept.Model.BaseConceptPropertyInfo)">
            <summary>
            Reads a property from the specified <see cref="T:Concept.Utils.IDataStoreNode">node</see>. If the property is not found in the <paramref name="node"/>, the default value is used.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The node to read from.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
            <param name="property">The property info.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.Write(Concept.Utils.IDataStoreNode,System.Reflection.PropertyInfo)">
            <summary>
            Writes a property in the specified <see cref="T:Concept.Utils.IDataStoreNode">node</see>.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The xml node to write the property in.</param>
            <param name="property">The property info.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.Read(Concept.Utils.IDataStoreNode,Concept.Utils.IMessageCollector,System.Reflection.PropertyInfo)">
            <summary>
            Reads a property from the specified <see cref="T:Concept.Utils.IDataStoreNode">node</see>. If the property is not found in the node, the default value is used.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The XML node to read from.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
            <param name="property">The property info.</param>
        </member>
        <member name="F:Concept.Model.ConceptContainer._serializedProperties">
            <summary>The property infos of properties to serialize ordered by subject. The return type is a dictionary regrouping the lists of property info by subject.</summary>
        </member>
        <member name="P:Concept.Model.ConceptContainer.PropertyInfos">
            <summary>Gets or sets the list of property info of all the properties of this component.</summary>
            <value>The list of property info of all the properties of this component.</value>
        </member>
        <member name="P:Concept.Model.ConceptContainer.Subjects">
            <summary>
            Gets the subjects of this element only. Does not return the subjects of children like <see cref="!:AllSubjects"/> property. Subjects are used to serialize specific parts of 
            the business model differently.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <value>The subjects.</value>
        </member>
        <member name="M:Concept.Model.ConceptContainer.InitializeSubject(System.Boolean)">
            <summary>Defines the subjects of this element and its properties from the metadata <see cref="T:Concept.Model.ConceptSerializedAttribute"/>.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="notify">if set to <c>true</c> calls <see cref="M:Concept.Model.ConceptElement.NotifySubject(Concept.Model.ConceptElement,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">NotifySubject</see> with <see cref="P:Concept.Model.ConceptElement.AllSubjects">AllSubjects</see>.</param>
        </member>
        <member name="P:Concept.Model.ConceptContainer.IsDefaultSubjectNeeded">
            <summary>Gets or sets a boolean indicating whether this instance needs the default subject in serialization.</summary>
            <value>
              <c>true</c> if this instance needs the default subject; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Concept.Model.ConceptContainer._isDefaultSubjectLoaded">
            <summary>
            Gets a boolean indicating if the default subject is loaded.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptContainer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            When overriding this method, always call the base.Dispose() at the end of your implementation instead of at the beginning.
            </summary>
            <param name="disposeManagedResources"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Concept.Model.ConceptContainer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptContainer.System#Collections#Generic#IEnumerable{Concept#Model#ConceptElement}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection of <see cref="T:Concept.Model.ConceptElement"/>.</returns>
        </member>
        <member name="E:Concept.Model.ConceptContainer.CollectionChanged">
            <summary>
            Occurs when the internal list changes.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptContainer.DoCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Throws the event <see cref="E:Concept.Model.ConceptContainer.CollectionChanged"/> when the internal list changes
            </summary>
            <param name="args">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Concept.Model.BaseConceptPropertyInfo">
            <summary>
            Class BaseConceptPropertyInfo
            </summary>
        </member>
        <member name="P:Concept.Model.BaseConceptPropertyInfo.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Concept.Model.BaseConceptPropertyInfo.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Concept.Model.BaseConceptPropertyInfo.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Concept.Model.BaseConceptPropertyInfo.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Concept.Model.BaseConceptPropertyInfo.HasDefaultValue">
            <summary>
            Define if a specific default value has been coded by the developer
            </summary>
            <value>The default value.</value>
        </member>
        <member name="M:Concept.Model.BaseConceptPropertyInfo.SetDefaultValue(System.Object)">
            <summary>
            Sets the default value.
            </summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="P:Concept.Model.BaseConceptPropertyInfo.Subjects">
            <summary>
            Gets the subjects.
            </summary>
            <value>The subjects.</value>
        </member>
        <member name="M:Concept.Model.BaseConceptPropertyInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="obj">The obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Concept.Model.BaseConceptPropertyInfo.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="P:Concept.Model.BaseConceptPropertyInfo.IsViewVisible">
            <summary>
            Gets a value indicating whether this instance is view visible.
            </summary>
            <value><c>true</c> if this instance is view visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Concept.Model.BaseConceptPropertyValueInfo">
            <summary>
            Class BaseConceptPropertyValueInfo
            </summary>
        </member>
        <member name="P:Concept.Model.BaseConceptPropertyValueInfo.IsSerialized">
            <summary>
            Gets a value indicating whether this instance is serialized.
            </summary>
            <value><c>true</c> if this instance is serialized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.BaseConceptPropertyValueInfo.SerializedIndex">
            <summary>
            Gets the index of the serialized.
            </summary>
            <value>The index of the serialized.</value>
        </member>
        <member name="T:Concept.Model.BaseConceptPropertyObjectInfo">
            <summary>
            Class BaseConceptPropertyObjectInfo
            </summary>
        </member>
        <member name="P:Concept.Model.BaseConceptPropertyObjectInfo.IsAutoCreated">
            <summary>
            Gets a value indicating whether this instance is auto created.
            </summary>
            <value><c>true</c> if this instance is auto created; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.BaseConceptPropertyObjectInfo.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Concept.Model.BaseConceptPropertyObjectInfo.HasDefaultValue">
            <summary>
            Define if a specific default value has been coded by the developer
            </summary>
            <value>The default value.</value>
        </member>
        <member name="T:Concept.Model.ConceptPropertyObjectInfo">
            <summary>
            Class ConceptPropertyObjectInfo
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptPropertyObjectInfo.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptPropertyObjectInfo"/> class.
            </summary>
            <param name="info">The info.</param>
        </member>
        <member name="P:Concept.Model.ConceptPropertyObjectInfo.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Concept.Model.ConceptPropertyObjectInfo.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Concept.Model.ConceptPropertyObjectInfo.IsAutoCreated">
            <summary>
            Gets a value indicating whether this instance is auto created.
            </summary>
            <value><c>true</c> if this instance is auto created; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.ConceptPropertyObjectInfo.Subjects">
            <summary>
            Gets the subjects.
            </summary>
            <value>The subjects.</value>
        </member>
        <member name="P:Concept.Model.ConceptPropertyObjectInfo.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Concept.Model.ConceptPropertyObjectInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="obj">The obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Concept.Model.ConceptPropertyObjectInfo.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="P:Concept.Model.ConceptPropertyObjectInfo.IsViewVisible">
            <summary>
            Gets a value indicating whether this instance is view visible.
            </summary>
            <value><c>true</c> if this instance is view visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.ConceptPropertyObjectInfo.Info">
            <summary>
            Gets or sets the info.
            </summary>
            <value>The info.</value>
        </member>
        <member name="F:Concept.Model.ConceptPropertyObjectInfo._subjects">
            <summary>
            The _subjects
            </summary>
        </member>
        <member name="T:Concept.Model.ConceptPropertyValueInfo">
            <summary>
            Class ConceptPropertyValueInfo
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptPropertyValueInfo.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptPropertyValueInfo"/> class.
            </summary>
            <param name="info">The info.</param>
        </member>
        <member name="P:Concept.Model.ConceptPropertyValueInfo.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Concept.Model.ConceptPropertyValueInfo.IsSerialized">
            <summary>
            Gets a value indicating whether this instance is serialized.
            </summary>
            <value><c>true</c> if this instance is serialized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.ConceptPropertyValueInfo.SerializedIndex">
            <summary>
            Gets the index of the serialized.
            </summary>
            <value>The index of the serialized.</value>
        </member>
        <member name="P:Concept.Model.ConceptPropertyValueInfo.Subjects">
            <summary>
            Gets the subjects.
            </summary>
            <value>The subjects.</value>
        </member>
        <member name="P:Concept.Model.ConceptPropertyValueInfo.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Concept.Model.ConceptPropertyValueInfo.HasDefaultValue">
            <summary>
            Define if a specific default value has been coded by the developer
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Concept.Model.ConceptPropertyValueInfo.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Concept.Model.ConceptPropertyValueInfo.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="M:Concept.Model.ConceptPropertyValueInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="obj">The obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Concept.Model.ConceptPropertyValueInfo.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="obj">The obj.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="P:Concept.Model.ConceptPropertyValueInfo.IsViewVisible">
            <summary>
            Gets a value indicating whether this instance is view visible.
            </summary>
            <value><c>true</c> if this instance is view visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Concept.Model.ConceptPropertyValueInfo.Info">
            <summary>
            Gets or sets the info.
            </summary>
            <value>The info.</value>
        </member>
        <member name="F:Concept.Model.ConceptPropertyValueInfo._type">
            <summary>
            The _type
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptPropertyValueInfo._isSerialized">
            <summary>
            The _is serialized
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptPropertyValueInfo._index">
            <summary>
            The _index
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptPropertyValueInfo._defaultValue">
            <summary>
            The _default value
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptPropertyValueInfo._displayName">
            <summary>
            The _display name
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptPropertyValueInfo._name">
            <summary>
            The _name
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptPropertyValueInfo._subjects">
            <summary>
            The _subjects
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptPropertyValueInfo._isViewVisible">
            <summary>
            The _is view visible
            </summary>
        </member>
        <member name="T:Concept.Model.SubjectedConceptProperties">
            <summary>
            Class SubjectedConceptProperties
            </summary>
        </member>
        <member name="T:Concept.Model.SubjectedConceptElements">
            <summary>
            Class SubjectedConceptElements
            </summary>
        </member>
        <member name="T:Concept.Model.ConceptFactory">
            <summary>
            Class ConceptFactory
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptFactory.FactoryId(System.Type)">
            <summary>
            Factories the id.
            </summary>
            <param name="type">The type.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Concept.Model.ConceptFactory.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptFactory"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="P:Concept.Model.ConceptFactory.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Concept.Model.ConceptFactory.CreateObject">
            <summary>
            Creates the object.
            </summary>
            <returns>ConceptElement.</returns>
            <exception cref="T:Concept.Utils.ConceptException">1000</exception>
        </member>
        <member name="P:Concept.Model.ConceptFactory.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Concept.Model.ConceptFactory.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Concept.Model.ConceptFactory.Details">
            <summary>
            Gets the details.
            </summary>
            <value>The details.</value>
        </member>
        <member name="P:Concept.Model.ConceptFactory.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="T:Concept.Model.ConceptProvidedFactory">
            <summary>
            Class ConceptProvidedFactory
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptProvidedFactory.#ctor(System.Type,Concept.Model.ConceptElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptProvidedFactory"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="provider">The provider.</param>
        </member>
        <member name="P:Concept.Model.ConceptProvidedFactory.Provider">
            <summary>
            Gets the provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="P:Concept.Model.ConceptProvidedFactory.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Concept.Model.ConceptProvidedFactory.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="M:Concept.Model.ConceptProvidedFactory.SetDisplayNameFormat(System.String,System.String)">
            <summary>
            Set the format of the intl display name
            </summary>
            <param name="key">The key of the intl.</param>
            <param name="defaultFormat">The default text of the intl.</param>
        </member>
        <member name="M:Concept.Model.ConceptProvidedFactory.SetDisplayNameFormat(System.String)">
            <summary>
            Set the format of the display name
            </summary>
            <param name="format">The format of the display name.</param>
        </member>
        <member name="M:Concept.Model.ConceptProvidedFactory.SetDisplayNameFormat(Concept.Utils.IntlText)">
            <summary>
            Set the format of the intl display name
            </summary>
            <param name="text">The intl text to use as format.</param>
        </member>
        <member name="T:Concept.Model.ConceptFactories">
            <summary>
            Class ConceptFactories
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptFactories.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptFactories"/> class.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptFactories.RegisterFactory(Concept.Model.ConceptFactory)">
            <summary>
            Registers the factory.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:Concept.Model.ConceptFactories.RegisterFactories(Concept.Model.ConceptFactories)">
            <summary>
            Registers the factories.
            </summary>
            <param name="factories">The factories.</param>
        </member>
        <member name="M:Concept.Model.ConceptFactories.RegisterFactoriesEnumerable(System.Collections.Generic.IEnumerable{Concept.Model.ConceptFactory})">
            <summary>
            Registers the factories.
            </summary>
            <param name="factories">The factories.</param>
        </member>
        <member name="M:Concept.Model.ConceptFactories.Find(System.String)">
            <summary>
            Finds the specified factory id.
            </summary>
            <param name="factoryId">The factory id.</param>
            <returns>ConceptFactory.</returns>
        </member>
        <member name="M:Concept.Model.ConceptFactories.CreateObject(System.String)">
            <summary>
            Creates the object.
            </summary>
            <param name="factoryId">The factory id.</param>
            <returns>ConceptElement.</returns>
        </member>
        <member name="P:Concept.Model.ConceptFactories.First">
            <summary>
            Gets the first.
            </summary>
            <value>The first.</value>
        </member>
        <member name="P:Concept.Model.ConceptFactories.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Concept.Model.ConceptDynamicList">
            <summary>Represents the base class for the lists containing polymorphous elements. As it inherits from <see cref="T:Concept.Model.ConceptElement"/>, instances of this class have the mechanism to serialize and
            deserialize themselves from/to a node or a file. When deserializing, the <see cref="T:Concept.Model.ConceptList" /> will dynamically create instances of <see cref="T:Concept.Model.ConceptElement" /> using the
            <see cref="T:Concept.Model.ConceptFactory" /> described in the node/file.</summary>
        </member>
        <member name="M:Concept.Model.ConceptDynamicList.WriteSpecificData(Concept.Utils.IDataStoreNode,Concept.Model.ConceptElement)">
            <summary>
            Used to save specific data of each list element. 
            In this implementation, the factory id of the <paramref name="item"/> is written to the <paramref name="node"/>.
            </summary>
            <param name="node">The node where to write the specific data.</param>
            <param name="item">The item to serialize.</param>
        </member>
        <member name="M:Concept.Model.ConceptDynamicList.CreateObject(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,System.Int32)">
            <summary>
            Creates the <see cref="T:Concept.Model.ConceptElement"/> at the specified <paramref name="index"/> of the list from an <see cref="T:Concept.Utils.IDataStoreNode">IDataStoreNode</see>. 
            Used during the deserialization of the list to create the contained objects.
            </summary>
            <param name="node">The node containing the data of the element.</param>
            <param name="factories">The list of factories to use for the deserialization of the element.</param>
            <param name="messageCollector">The message collector filled with the errors occuring during the process.</param>
            <param name="index">The index of element to create in the list.</param>
            <returns>The element created.</returns>
        </member>
        <member name="M:Concept.Model.ConceptDynamicList.CreateElement(Concept.Model.ConceptFactory)">
            <summary>Creates an instance of a <see cref="T:Concept.Model.ConceptElement" /> with the specified <paramref name="factory"/>. A unique name is automatically generated for the new element.
            Each child must have a unique name for identification and serialization see "Manual creation of a ConceptComponent" in <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DesigningAndImplementingAModel.html"/>
            </summary>
            <param name="factory">The factory used to create the instance</param>
            <returns></returns>
        </member>
        <member name="P:Concept.Model.ConceptDynamicList.ItemType">
            <summary>
            Gets the type of the items contained in the list.
            </summary>
            <value>The type of the items.</value>
        </member>
        <member name="P:Concept.Model.ConceptDynamicList.AutoSelectIfUniqueFactory">
            <summary>
            Gets or sets whether the add command will automatically select the factory in the case where there's only one available.
            </summary>
            <value><c>true</c> To make the command automatically select the factory in the case where there's only one available.</value>
        </member>
        <member name="T:Concept.Model.ConceptDynamicList`1">
            <summary>Represents the generic class for the lists containing polymorphous elements. As it inherits from <see cref="T:Concept.Model.ConceptElement"/>, instances of this class have the mechanism to serialize and
            deserialize themselves from/to a node or a file. When deserializing, the <see cref="T:Concept.Model.ConceptList" /> will dynamically create instances of <see cref="T:Concept.Model.ConceptElement" /> using the
            <see cref="T:Concept.Model.ConceptFactory" /> described in the node/file.</summary>
            <typeparam name="T">The base class for the polymorphous elements</typeparam>
        </member>
        <member name="M:Concept.Model.ConceptDynamicList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptDynamicList`1"/> class.
            </summary>
        </member>
        <member name="P:Concept.Model.ConceptDynamicList`1.Items">
            <summary>
            Gets the elements that have been added to the list.
            </summary>
            <value>The items of the list.</value>
        </member>
        <member name="M:Concept.Model.ConceptDynamicList`1.CanAdd(Concept.Model.ConceptElement,System.String@)">
            <summary>
            Determines whether the specified <paramref name="item"/> can be added to this list.
            </summary>
            <param name="item">The item to be added.</param>
            <param name="message">The message filled with the errors occurring during the process.</param>
            <returns><c>true</c> if the item can be added to this list; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Concept.Model.ConceptDynamicList`1.ItemType">
            <summary>
            Gets the base type of every items of the list.
            </summary>
            <value>The base type of every items of the list.</value>
        </member>
        <member name="P:Concept.Model.ConceptDynamicList`1.AcceptOnlyProvided">
            <summary>
            Gets or sets if the items accepted in this list should only be of a provided type.
            A provider is useful to make certain type of processes available depending on the current configuration.
            </summary>
            <value><c>true</c> if the items accepted in this list must be of a provided type; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Concept.Model.ConceptDynamicList`1.CanAccept(Concept.Model.ConceptFactory)">
            <summary>
            Determines whether this instance can accept objects of the specified <paramref name="factory"/> in its items.
            </summary>
            <param name="factory">The factory.</param>
            <returns>
            	<c>true</c> if this instance can accept objects of the specified factory; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Concept.Model.ConceptDynamicList`1.Indexer`1">
            <summary>
            Represents the indexer of dynamic lists of type U.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptDynamicList`1.Indexer`1.#ctor(Concept.Model.ConceptDynamicList{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptDynamicList`1"/> class.
            </summary>
            <param name="owner">The owner of the <see cref="T:Concept.Model.ConceptDynamicList`1.Indexer`1">indexer</see>.</param>
        </member>
        <member name="P:Concept.Model.ConceptDynamicList`1.Indexer`1.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <param name="index">The index of the <see cref="T:System.Object"/> to get.</param>
            <returns>The <see cref="T:System.Object"/> at the specified index</returns>
        </member>
        <member name="M:Concept.Model.ConceptDynamicList`1.Indexer`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptDynamicList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific <paramref name="item"/> in the list.
            </summary>
            <param name="item">The object to locate in the list.</param>
            <returns>The index of the item if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Concept.Model.ConceptDynamicList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an <paramref name="item"/> to the list at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index where the item should be inserted.</param>
            <param name="item">The object to insert into the list.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is smaller than 0 or bigger than or equal to the items count of the list.</exception>
            <exception cref="T:System.NotSupportedException">The list is read-only.</exception>
        </member>
        <member name="P:Concept.Model.ConceptDynamicList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the <paramref name="index"/> position.
            </summary>
            <param name="index">The index of the element.</param>
            <value>The item contained at the index position.</value>
        </member>
        <member name="M:Concept.Model.ConceptDynamicList`1.Add(`0)">
            <summary>
            Adds the <paramref name="item"/> to the list.
            </summary>
            <param name="item">The item to add to the list.</param>
        </member>
        <member name="M:Concept.Model.ConceptDynamicList`1.Contains(`0)">
            <summary>
             Determines whether the list contains a specific <paramref name="item"/>.
            </summary>
            <param name="item">The object to locate in the list.</param>
            <returns>
            	<c>true</c> if the <paramref name="item"/> is found in the list; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptDynamicList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the list to an <paramref name="array"/>, starting at a particular <paramref name="index"/> of the list.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements to copy from the list.</param>
            <param name="arrayIndex">The zero-based index from which elements should be copied to the array.</param>
        </member>
        <member name="P:Concept.Model.ConceptDynamicList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the list is read-only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
            <returns>true if the list is read-only; otherwise, false.</returns>
        </member>
        <member name="M:Concept.Model.ConceptDynamicList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a an <paramref name="item"/> from the list.
            </summary>
            <param name="item">The object to remove from the list.</param>
            <returns> Returns <c>true</c> if the item was successfully removed from the list; otherwise, <c>false</c>. 
            This method also returns <c>false</c> if the item is not found in the original list.</returns>
        </member>
        <member name="M:Concept.Model.ConceptDynamicList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Concept.Model.ConceptDynamicList`1.Expression">
            <summary>Gets the expression tree associated with the instance of <see cref="T:Concept.Model.ConceptDynamicList`1">ConceptDynamicList</see>.</summary>
            <value>The expression associated with this instance of <see cref="T:Concept.Model.ConceptDynamicList`1">ConceptDynamicList</see>.</value>
        </member>
        <member name="P:Concept.Model.ConceptDynamicList`1.ElementType">
            <summary>Gets the type of the element returned when the expression tree associated with this instance of <see cref="T:Concept.Model.ConceptDynamicList`1">ConceptDynamicList</see> is executed.</summary>
            <value>The type of the element returned when the expression tree associated with this object is executed.</value>
        </member>
        <member name="P:Concept.Model.ConceptDynamicList`1.System#Linq#IQueryable#Provider">
            <summary>Gets the query provider associated with this data source.</summary>
            <value>The provider associated with this data source.</value>
        </member>
        <member name="T:Concept.Model.IChildrenView">
            <summary>
            Interface IChildrenView
            </summary>
            <remarks>
            The class that implements IChildrenView must manage the changed of the Children by itself,
            by calling DoPropertyChanged(ConceptModelUtils.ChildrenPropertyName);
            </remarks>
        </member>
        <member name="P:Concept.Model.IChildrenView.Children">
            <summary>
            Gets the children.
            </summary>
            <value>The children.</value>
            <remarks>
            - Return an empty list to display no children.
            - Return a null value to reset the use of the interface and ask ConceptHmi to return the default children.
            </remarks>
        </member>
        <member name="T:Concept.Model.ConceptField">
            <summary>
            Class ConceptField
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptField"/> class.
            </summary>
        </member>
        <member name="T:Concept.Model.BinaryData">
            <summary>
            Class BinaryData
            </summary>
        </member>
        <member name="T:Concept.Model.PngData">
            <summary>
            Class PngData
            </summary>
            <remarks>
              <see cref="T:Concept.Model.BinaryToStringConverter`1">Converter</see> must be in the view, because of the dependance with the UI Technology
            </remarks>
        </member>
        <member name="T:Concept.Model.BinaryToStringConverter`1">
            <summary>
            Class BinaryToStringConverter
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Concept.Model.BinaryToStringConverter`1.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Concept.Model.BinaryToStringConverter`1.ConvertTo(System.Object)">
            <summary>
            Converts to.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Concept.Model.BinaryToStringConverter`1.ConvertFrom(System.String)">
            <summary>
            Converts from.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:Concept.Model.ConceptList">
            <summary
            >Represents the base class for all the lists provided by Concept framework. As it inherits from <see cref="T:Concept.Model.ConceptElement"/>, instances of this class have the mechanism to serialize and
            deserialize themselves from/to a node or a file.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptList"/> class.
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptList.EntryItem">
            <summary>
            Constant string to serialize the Item property.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptList.WriteTo(Concept.Utils.IDataStoreNode)">
            <summary>
            Saves all nested properties marked with the <see cref="T:Concept.Model.ConceptSerializedAttribute"/> and contained elements of a list in a <see cref="T:Concept.Utils.IDataStoreNode">node</see>.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The node where the data will be saved.</param>
        </member>
        <member name="M:Concept.Model.ConceptList.WriteTo(Concept.Utils.IDataStoreNode,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves all nested properties marked with the <see cref="T:Concept.Model.ConceptSerializedAttribute"/> and contained elements of a list in a <see cref="T:Concept.Utils.IDataStoreNode">node</see>.
            The serialization can be conditional based on a subject.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The node where the data will be saved.</param>
            <param name="subjects">The subjects to use to serialize specific elements and properties of the list.</param>
        </member>
        <member name="M:Concept.Model.ConceptList.WriteTo(Concept.Utils.IDataStoreNode,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves all nested properties marked with the <see cref="T:Concept.Model.ConceptSerializedAttribute"/> and contained elements of a list in a <see cref="T:Concept.Utils.IDataStoreNode">node</see>.
            The serialization can be conditional based on subjects.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The node.</param>
            <param name="useSubject">if set to <c>true</c> the subjecs are used.</param>
            <param name="subjects">The subjects to use to serialize specific elements and properties of the list.</param>
        </member>
        <member name="M:Concept.Model.ConceptList.WriteSpecificData(Concept.Utils.IDataStoreNode,Concept.Model.ConceptElement)">
            <summary>
            Can be used to save specific data of each list element. This base implementation is empty.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The node to write the specific data.</param>
            <param name="item">The item to serialize.</param>
        </member>
        <member name="M:Concept.Model.ConceptList.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector)">
            <summary>
            Reads all serialized properties and contained elements of a list from an <see cref="T:Concept.Utils.IDataStoreNode">IDataStoreNode</see>.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The node containing the data of the ConceptElement.</param>
            <param name="factories">The list of factories to use for the deserialization of the ConceptElement.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
        </member>
        <member name="M:Concept.Model.ConceptList.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reads all serialized properties and contained elements of a list from an <see cref="T:Concept.Utils.IDataStoreNode">IDataStoreNode</see>.
            Some properties or elements may or may not be read depending on the subjects passed in parameter.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The node containing the data of the ConceptElement.</param>
            <param name="factories">The list of factories to use for the deserialization of the ConceptElement.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
            <param name="subjects">>The subjects to use to deserialize specific elements and properties of the list.</param>
        </member>
        <member name="M:Concept.Model.ConceptList.ReadFrom(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reads all serialized properties and contained elements of a list from an <see cref="T:Concept.Utils.IDataStoreNode">IDataStoreNode</see>.
            Some properties or elements may or may not be read depending on the subjects passed in parameter.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The node containing the data of the ConceptElement.</param>
            <param name="factories">The list of factories to use for the deserialization of the ConceptElement.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
            <param name="useSubject">if set to <c>true</c> the subjects are used.</param>
            <param name="subjects">>The subjects to use to serialize specific elements and properties of the list.</param>
        </member>
        <member name="M:Concept.Model.ConceptList.CreateObject(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,System.Int32)">
            <summary>
            Creates the object positioned at the specified index of the list from an <see cref="T:Concept.Utils.IDataStoreNode">IDataStoreNode</see>. 
            This methode is used during the deserialization of the list to create the contained objects.
            More information about data persistance and subjects can be found <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DataPersistence.html">here</see>.
            </summary>
            <param name="node">The node containing the data of the element.</param>
            <param name="factories">The list of factories to use for the deserialization of the element.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
            <param name="index">The index of the element to create from the serialized list.</param>
            <returns>The element created.</returns>
        </member>
        <member name="P:Concept.Model.ConceptList.ItemType">
            <summary>
            Gets the type of the items contained in the list.
            </summary>
            <value>The type of the items.</value>
        </member>
        <member name="M:Concept.Model.ConceptList.CanAccept(Concept.Model.ConceptFactory)">
            <summary>
            Determines whether this instance can accept an object with the specified factory as list elements.
            </summary>
            <param name="factory">The factory.</param>
            <returns>
            	<c>true</c> if this instance can accept the specified factory; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptList.Clear">
            <summary>
            Clears this instance by removing all list elements.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptList.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources. When overriding this method, always call the base.Dispose() at the end of your implementation instead of at the beginning.
            </summary>
            <param name="disposeManagedResources"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Concept.Model.ConceptList.GetHashCode(System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Provides a hash code that matches to the serializable properties of the list elements. This hash code allows to know if the list has changed between two calls of this function.
            This hash code is not unique for an instance.
            </summary>
            <param name="recursive">Define if the hash must look in the items of the elements list</param>
            <param name="subjects">The list of subjects which enable to choose the elements and properties to include in the hash</param>
            <returns>
            A <see cref="T:System.String"/> that represents the code.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptList.IsNameUnique(Concept.Model.ConceptElement,System.String)">
            <summary>
            Determines whether the <paramref name="name"/> is already used in the internal list. The name must be unique.
            Optimization for the lists. 
            </summary>
            <param name="element">The <see cref="T:Concept.Model.ConceptElement"/> whose name has been or will be set with <paramref name="name"/> if unique.</param>
            <param name="name">The name to verify.</param>
            <returns>
            	<c>true</c> if the name is not used in the list; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptList.FindByName(System.String)">
            <summary>
            Finds the <see cref="T:Concept.Model.ConceptElement" /> matching the specified <paramref name="name"/> in the hierarchical model.
            Optimization for the lists. 
            </summary>
            <param name="name">The name of the searched <see cref="T:Concept.Model.ConceptElement" />.</param>
            <returns>&gt;Returns a <see cref="T:Concept.Model.ConceptElement" /> if the name is valid; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptList.InternalAdd(Concept.Model.ConceptElement)">
            <summary>
            Adds the specified <paramref name="item"/> to the internal list of the <see cref="T:Concept.Model.ConceptContainer"/>.
            Optimization for the lists. 
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:Concept.Model.ConceptList.InternalRemove(Concept.Model.ConceptElement)">
            <summary>
            Removes the specified <paramref name="item"/> to the internal list of the <see cref="T:Concept.Model.ConceptContainer"/>.
            Optimization for the lists.
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="T:Concept.Model.ConceptModelUtils">
            <summary>
            Class ConceptModelUtils
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.FactoriesOf(Concept.Model.ConceptContainer,Concept.Model.ConceptFactories,System.Type)">
            <summary>
            Factorieses the of.
            </summary>
            <param name="container">The container.</param>
            <param name="source">The source.</param>
            <param name="type">The type.</param>
            <returns>ConceptFactories.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.FactoriesOf(Concept.Model.ConceptFactories,System.Type)">
            <summary>
            Factorieses the of.
            </summary>
            <param name="source">The source.</param>
            <param name="type">The type.</param>
            <returns>ConceptFactories.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.FactoriesOf(System.Collections.Generic.IEnumerable{System.Type},System.Type)">
            <summary>
            Factorieses the of.
            </summary>
            <param name="source">The source.</param>
            <param name="type">The type.</param>
            <returns>ConceptFactories.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeFactoryId(System.Type)">
            <summary>
            Gets the attribute factory id.
            </summary>
            <param name="type">The type.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeVisible(System.Type)">
            <summary>
            Gets the attribute visible.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if type has <see cref="T:Concept.Model.ConceptVisibleAttribute">Visible</see> attribute<c>false</c> otherwise</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeVisible(System.Reflection.PropertyInfo)">
            <summary>
            Gets the attribute visible.
            </summary>
            <param name="propertyInfo">The property info.</param>
            <returns><c>true</c> if propertyInfo has <see cref="T:Concept.Model.ConceptVisibleAttribute">Visible</see> attribute<c>false</c> otherwise</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeViewVisible(System.Type)">
            <summary>
            Gets the attribute view visible.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if type has <see cref="T:Concept.Model.ConceptViewVisibleAttribute">ViewVisible</see> attribute, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeViewVisible(System.Reflection.PropertyInfo)">
            <summary>
            Gets the attribute view visible.
            </summary>
            <param name="property">The property.</param>
            <returns><c>true</c> if property has <see cref="T:Concept.Model.ConceptViewVisibleAttribute">ViewVisible</see> attribute, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeName(System.Type)">
            <summary>
            Gets the name of the attribute.
            </summary>
            <param name="type">The type.</param>
            <returns>IntlText.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeName(System.Reflection.MemberInfo,System.String)">
            <summary>
            Gets the name of the attribute.
            </summary>
            <param name="info">The info.</param>
            <param name="defaultName">The default name.</param>
            <returns>IntlText.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeCategory(System.Object)">
            <summary>
            Gets the attribute category.
            </summary>
            <param name="element">The element.</param>
            <returns>IntlText.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeCategory(System.Type)">
            <summary>
            Gets the attribute category.
            </summary>
            <param name="type">The type.</param>
            <returns>IntlText.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeDetails(System.Type)">
            <summary>
            Gets the attribute details.
            </summary>
            <param name="type">The type.</param>
            <returns>IntlText.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeView(System.Type)">
            <summary>
            Gets the attribute view.
            </summary>
            <param name="type">The type.</param>
            <returns>IEnumerable{Type}.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeRoot(System.Type)">
            <summary>
            Gets the attribute root.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if type has <see cref="T:Concept.Model.ConceptRootAttribute">ConceptRoot</see> attribute, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeIsSerialized(System.Reflection.PropertyInfo,System.Int32@)">
            <summary>
            Gets the attribute is serialized.
            </summary>
            <param name="property">The property.</param>
            <param name="index">The index.</param>
            <returns><c>true</c> if property has <see cref="T:Concept.Model.ConceptSerializedAttribute">ConceptSerialized</see> attribute, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeSubjects(System.Reflection.PropertyInfo)">
            <summary>
            Gets the attribute subjects.
            </summary>
            <param name="property">The property.</param>
            <returns>IEnumerable{System.String}.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeIsAutoCreateByDefault(System.Type)">
            <summary>
            Gets the attribute indicating if a <see cref="T:Concept.Model.ConceptComponent"/> must be auto created by default,
            even if the attribute <see cref="T:Concept.Model.ConceptAutoCreateAttribute"/> is not used.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the property has <see cref="T:Concept.Model.ConceptAutoCreateAttribute"/> attribute, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeIsAutoCreate(System.Reflection.PropertyInfo,System.String@)">
            <summary>
            Gets the attribute indicating if a <see cref="T:Concept.Model.ConceptComponent"/> must be auto created.
            </summary>
            <param name="property">The property.</param>
            <param name="name">The name.</param>
            <returns><c>true</c> if the property has <see cref="T:Concept.Model.ConceptAutoCreateAttribute"/> attribute, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetAttributeEditor(System.Type)">
            <summary>
            Gets the attribute editor.
            </summary>
            <param name="type">The type.</param>
            <returns>IEnumerable{Type}.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.HasFlagSet(Concept.Model.ConceptOptions,Concept.Model.ConceptOptions)">
            <summary>
            Determines whether [has flag set] [the specified options].
            </summary>
            <param name="options">The options.</param>
            <param name="flags">The flags.</param>
            <returns><c>true</c> if [has flag set] [the specified options]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.GetDefaultValueOf(System.Reflection.PropertyInfo)">
            <summary>
            Gets the default value of.
            </summary>
            <param name="property">The property.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.IsNameValid(System.String,Concept.Model.ConceptElement,System.String@)">
            <summary>
            Determines whether [is name valid] [the specified name].
            </summary>
            <param name="name">The name.</param>
            <param name="element">The element.</param>
            <param name="causes">The causes.</param>
            <returns><c>true</c> if [is name valid] [the specified name]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.IsAncestorOf(Concept.Model.ConceptContainer,Concept.Model.ConceptElement)">
            <summary>
            Determines whether [is ancestor of] [the specified ancestor container].
            </summary>
            <param name="ancestorContainer">The ancestor container.</param>
            <param name="conceptElement">The concept element.</param>
            <returns><c>true</c> if [is ancestor of] [the specified ancestor container]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.FindContainerOfType``1(Concept.Model.ConceptElement,System.Int32)">
            <summary>
            Finds the first container of type T of the <paramref name="element"/> from the <paramref name="level"/>.
            </summary>
            <typeparam name="T">Type of the container to find (inheriting from ConceptElement)</typeparam>
            <param name="element">The element</param>
            <param name="level">The minimum level to go up to (default value of 0) before returning a container</param>
            <returns>The first container of type T</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.FindContainerOfSpecialType``1(Concept.Model.ConceptElement,System.Int32)">
            <summary>
            Finds the first container of type T of the <paramref name="element"/> from the <paramref name="level"/>.
            </summary>
            <typeparam name="T">Type of the container to find (inheriting from object)</typeparam>
            <param name="element">The element</param>
            <param name="level">The minimum level to go up to (default value of 0) before returning a container</param>
            <returns>The first container of type T</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.IsTypeValid(System.Type,System.Type,System.Boolean)">
            <summary>
            Determines whether [is type valid] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <param name="baseType">Type of the base.</param>
            <returns><c>true</c> if [is type valid] [the specified type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.HasSubject(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether the specified subjects has subject.
            </summary>
            <param name="subjects">The subjects.</param>
            <returns><c>true</c> if the specified subjects has subject; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.HasDefaultSubject(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether [has default subject] [the specified subjects].
            </summary>
            <param name="subjects">The subjects.</param>
            <returns><c>true</c> if [has default subject] [the specified subjects]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.HasSubject(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Determines whether the specified subjects has subject.
            </summary>
            <param name="subjects">The subjects.</param>
            <param name="subject">The subject.</param>
            <returns><c>true</c> if the specified subjects has subject; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.HasDefaultSubject(Concept.Model.ConceptElement)">
            <summary>
            Determines whether [has default subject] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if [has default subject] [the specified item]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.HasOneOfSubjects(Concept.Model.ConceptElement,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether [has one of subjects] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <param name="subjects">The subjects.</param>
            <returns><c>true</c> if [has one of subjects] [the specified item]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.CreateObjectFromNode(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,Concept.Model.ConceptContainer,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates and load a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> from a node.
            </summary>
            <param name="node">The node containing the factory to use and the data of the ConceptElement.</param>
            <param name="factories">The list of factories to use for the desirialisation of the ConceptElement.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
            <param name="container">The container.</param>
            <param name="subjects">The subjects.</param>
            <returns>ConceptElement.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.ReadElementFromNode(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,Concept.Model.ConceptContainer,System.Collections.Generic.IEnumerable{System.String},Concept.Model.ConceptElement,System.String)">
            <summary>
            Reads the element from node.
            </summary>
            <param name="node">The node.</param>
            <param name="factories">The factories.</param>
            <param name="messageCollector">The message collector.</param>
            <param name="container">The container.</param>
            <param name="subjects">The subjects.</param>
            <param name="item">The item.</param>
            <param name="factoryName">Name of the factory.</param>
            <returns>ConceptElement.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.SaveObjectToNode(Concept.Model.ConceptElement,Concept.Utils.IDataStoreNode,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> to a node.
            </summary>
            <param name="element">The ConceptElement to serialize</param>
            <param name="node">The node where the factory and the data will be saved.</param>
            <param name="subjects">The subjects.</param>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.LoadStoreFromFile(Concept.Utils.XmlDataStore,System.String,Concept.Utils.IMessageCollector)">
            <summary>
            Loads the store from file.
            </summary>
            <param name="store">The store.</param>
            <param name="fileName">Name of the file.</param>
            <param name="messageCollector">The message collector.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.CreateObjectFromFile(System.String,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates and load a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> from a node.
            </summary>
            <param name="filename">The filename containing the factory tu use and the data of the ConceptElement.</param>
            <param name="factories">The list of factories to use for the desirialisation of the ConceptElement.</param>
            <param name="messageCollector">The message collector that collects error occuring during the process.</param>
            <param name="subjects">The subjects.</param>
            <returns>ConceptElement.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.SaveObjectToFile(Concept.Model.ConceptElement,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves a <see cref="T:Concept.Model.ConceptElement">ConceptElement</see> to a node.
            </summary>
            <param name="element">The ConceptElement to serialize</param>
            <param name="filename">The filename.</param>
            <param name="subjects">The subjects.</param>
        </member>
        <member name="F:Concept.Model.ConceptModelUtils.IntlFolder">
            <summary>
            The intl defautl folder
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.LoadDictionary(System.Reflection.Assembly)">
            <summary>
            Loads the dictionary.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="F:Concept.Model.ConceptModelUtils.ChildrenPropertyName">
            <summary>
            Constant string to manage Children property changed.
            </summary>
            <seealso cref="T:Concept.Model.IChildrenView"/>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.AllConceptFactories(Concept.Model.ConceptElement)">
            <summary>
            Alls the concept factories.
            </summary>
            <param name="element">The element.</param>
            <returns>ConceptFactories.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.AllConceptFactories(Concept.Model.ConceptElement,System.Type)">
            <summary>
            All the concept factories.
            </summary>
            <param name="element">The element.</param>
            <param name="type">The type.</param>
            <returns>ConceptFactories.</returns>
        </member>
        <member name="M:Concept.Model.ConceptModelUtils.AllAcceptedConceptFactories(Concept.Model.ConceptContainer,System.Type)">
            <summary>
            All the concept factories accepted by the container.
            </summary>
            <param name="container">The container.</param>
            <param name="type">The type.</param>
            <returns>ConceptFactories.</returns>
        </member>
        <member name="T:Concept.Model.ConceptOptions">
            <summary>
            Enum ConceptOptions
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptOptions.NotSerialized">
            <summary>
            Option that disable serialization
            </summary>
        </member>
        <member name="F:Concept.Model.ConceptOptions.NotSpecificNodeNeeded">
            <summary>
            Option that disable the mandatory node
            </summary>
        </member>
        <member name="T:Concept.Model.ConceptStaticList">
            <summary>Represents the base class for the lists containing elements of the same nature. As it inherits from <see cref="T:Concept.Model.ConceptElement"/>, instances of this class have the mechanism to serialize and
            deserialize themselves from/to a node or a file.
            </summary>
        </member>
        <member name="M:Concept.Model.ConceptStaticList.AddNewElement">
            <summary>
            Adds a new element in the list. A unique name is automatically generated for the new element.
            Each child must have a unique name for identification and serialization see "Manual creation of a ConceptComponent" in <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DesigningAndImplementingAModel.html"/>
            </summary>
            <returns>the element created and added in the list.</returns>
        </member>
        <member name="M:Concept.Model.ConceptStaticList.AddNewElement(System.String)">
            <summary>
            Adds a new element in the list with the specified name.
            Each child must have a unique name for identification and serialization see "Manual creation of a ConceptComponent" in <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DesigningAndImplementingAModel.html"/>
            </summary>
            <param name="name">The name of new element.</param>
            <returns>The element created and added in the list.</returns>
        </member>
        <member name="P:Concept.Model.ConceptStaticList.ElementFactory">
            <summary>
            Gets or sets the <see cref="T:Concept.Model.ConceptFactory"/> of the list elements. This base implementation is empty.
            Used to create the new objects of the list.
            </summary>
            <value>The concept factory of the list elements.</value>
        </member>
        <member name="T:Concept.Model.ConceptStaticList`1">
            <summary>Represents the generic class for the lists containing elements of the same nature. As it inherits from <see cref="T:Concept.Model.ConceptElement"/>, instances of this class have the mechanism to serialize and
            deserialize themselves from/to a node or a file.
            </summary>
            <typeparam name="T">The type of the list elements</typeparam>
        </member>
        <member name="T:Concept.Model.ConceptStaticList`1.Indexer`1">
            <summary>
            Represents the indexer of static lists of type U.
            </summary>
            <typeparam name="U">The type of elements of the <see cref="T:Concept.Model.ConceptStaticList`1.Indexer`1">indexer</see></typeparam>
        </member>
        <member name="M:Concept.Model.ConceptStaticList`1.Indexer`1.#ctor(Concept.Model.ConceptStaticList{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptStaticList`1.Indexer`1">indexer</see> class.
            </summary>
            <param name="owner">The owner of the <see cref="T:Concept.Model.ConceptStaticList`1.Indexer`1">indexer</see>.</param>
        </member>
        <member name="P:Concept.Model.ConceptStaticList`1.Indexer`1.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <param name="index">The index of the <see cref="T:System.Object"/> to get.</param>
            <returns>The <see cref="T:System.Object"/> at the specified index</returns>
        </member>
        <member name="M:Concept.Model.ConceptStaticList`1.Indexer`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptStaticList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Concept.Model.ConceptStaticList`1"/> class.
            </summary>
        </member>
        <member name="P:Concept.Model.ConceptStaticList`1.Items">
            <summary>
            Gets the elements that have been added to this list.
            </summary>
            <value>The items of the list</value>
        </member>
        <member name="M:Concept.Model.ConceptStaticList`1.CreateObject(Concept.Utils.IDataStoreNode,Concept.Model.ConceptFactories,Concept.Utils.IMessageCollector,System.Int32)">
            <summary>
            Creates the <see cref="T:Concept.Model.ConceptElement"/> at the specified <paramref name="index"/> of the list from an <see cref="T:Concept.Utils.IDataStoreNode">IDataStoreNode</see>. 
            Used during the deserialization of the list to create the contained objects.
            </summary>
            <param name="node">The node containing the data of the element.</param>
            <param name="factories">The list of factories to use for the deserialization of the element.</param>
            <param name="messageCollector">The message collector filled with the errors occuring during the process.</param>
            <param name="index">The index of element to create in the list.</param>
            <returns>The element created.</returns>
        </member>
        <member name="M:Concept.Model.ConceptStaticList`1.AddNewElement">
            <summary>
            Creates a new element of type T and adds it to the list. A unique name is automatically generated for the new element.
            Each child must have a unique name for identification and serialization see "Manual creation of a ConceptComponent" in <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DesigningAndImplementingAModel.html"/>
            </summary>
            <returns>the element created and added in the list.</returns>
        </member>
        <member name="M:Concept.Model.ConceptStaticList`1.AddNewElement(System.String)">
            <summary>
            Creates a new element of type T with the specified name and adds it to the list. If <paramref name="name"/> is already used in this list, a unique name is automatically generated for the new element.
            Each child must have a unique name for identification and serialization see "Manual creation of a ConceptComponent" in <see cref="!:http://www.objectis-software.com/support/doc/api-guides/concept-hmi/3.x/ConceptHmi.html#DesigningAndImplementingAModel.html"/>
            </summary>
            <param name="name">The name of new element.</param>
            <returns>The element created and added in the list.</returns>
        </member>
        <member name="P:Concept.Model.ConceptStaticList`1.ElementFactory">
            <summary>
            Gets or sets the <see cref="T:Concept.Model.ConceptFactory"/> of the list elements. Used to create the new objects of the list.
            With <see cref="T:Concept.Model.ConceptStaticList`1"/> this value is the <see cref="T:Concept.Model.ConceptFactory"/> of the type T.
            </summary>
            <value>The concept factory of the elements of the list.</value>
        </member>
        <member name="P:Concept.Model.ConceptStaticList`1.ItemType">
            <summary>
            Gets the type of the items contained in the list. 
            Returns the type of <see cref="P:Concept.Model.ConceptStaticList`1.ElementFactory"/>.
            </summary>
            <value>The type of the items.</value>
        </member>
        <member name="M:Concept.Model.ConceptStaticList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific <paramref name="item"/> in the list.
            </summary>
            <param name="item">The object to locate in the list.</param>
            <returns>The index of the item if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Concept.Model.ConceptStaticList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an <paramref name="item"/> to the list at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index where the item should be inserted.</param>
            <param name="item">The object to insert into the list.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is smaller than 0 or bigger than or equal to the items count of the list.</exception>
            <exception cref="T:System.NotSupportedException">The list is read-only.</exception>
        </member>
        <member name="P:Concept.Model.ConceptStaticList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the <paramref name="index"/> position.
            </summary>
            <param name="index">The index of the element.</param>
            <returns>The item contained at the index position.</returns>
        </member>
        <member name="M:Concept.Model.ConceptStaticList`1.Add(`0)">
            <summary>
            Adds the <paramref name="item"/> to the list.
            </summary>
            <param name="item">The item to add to the list.</param>
        </member>
        <member name="M:Concept.Model.ConceptStaticList`1.Contains(`0)">
            <summary>
             Determines whether the list contains a specific <paramref name="item"/>.
            </summary>
            <param name="item">The object to locate in the list.</param>
            <returns>
            	<c>true</c> if the <paramref name="item"/> is found in the list; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Concept.Model.ConceptStaticList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the list to an <paramref name="array"/>, starting at a particular <paramref name="index"/> of the list.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements to copy from the list.</param>
            <param name="arrayIndex">The zero-based index from which elements should be copied to the array.</param>
        </member>
        <member name="P:Concept.Model.ConceptStaticList`1.IsReadOnly">
            <summary>
            Gets a boolean indicating whether the list is read-only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
            <returns>true if the list is read-only; otherwise, false.</returns>
        </member>
        <member name="M:Concept.Model.ConceptStaticList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of an <paramref name="item"/> from the list.
            </summary>
            <param name="item">The object to remove from the list.</param>
            <returns> Returns <c>true</c> if the item was successfully removed from the list; otherwise, <c>false</c>. 
            This method also returns <c>false</c> if the item is not found in the original list.</returns>
        </member>
        <member name="M:Concept.Model.ConceptStaticList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Concept.Model.ConceptStaticList`1.Expression">
            <summary>Gets the expression tree associated with the instance of <see cref="T:Concept.Model.ConceptStaticList`1">ConceptStaticList</see>.</summary>
            <value>The expression associated with this instance of <see cref="T:Concept.Model.ConceptStaticList`1">ConceptStaticList</see>.</value>
        </member>
        <member name="P:Concept.Model.ConceptStaticList`1.ElementType">
            <summary>Gets the type of the element returned when the expression tree associated with this instance of <see cref="T:Concept.Model.ConceptStaticList`1">ConceptStaticList</see> is executed.</summary>
            <value>The type of the element returned when the expression tree associated with this object is executed.</value>
        </member>
        <member name="P:Concept.Model.ConceptStaticList`1.System#Linq#IQueryable#Provider">
            <summary>Gets the query provider associated with this data source.</summary>
            <value>The provider associated with this data source.</value>
        </member>
        <member name="T:Concept.Model.PluginClassManager">
            <summary>
            Summary description for PluginClassManager.
            </summary>
            
        </member>
        <member name="F:Concept.Model.PluginClassManager.EntryPluginFiles">
            <summary>
            The Puo Entry for the plugins files
            </summary>
        </member>
        <member name="P:Concept.Model.PluginClassManager.FilePathToAssembly">
            <summary>
            Give the whole information which files had been tried to be loaded.
            </summary>
        </member>
        <member name="M:Concept.Model.PluginClassManager.GetConflictingAssemblies">
            <summary>
            Check the current Application domain if there are assemblies loaded multiple times. 
            </summary>
            <returns>Dictionary which contains as key the assembly name which is loaded multiple times and as key
            as string list with the locations from where it was loaded.When no conflict has
            been determined an emtpy list is returned.</returns>
        </member>
        <member name="M:Concept.Model.PluginClassManager.LoadAssembly(System.String,Concept.Utils.IMessageCollector)">
            <summary>
            Loads the assembly.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="messageCollector">The message collector.</param>
        </member>
        <member name="M:Concept.Model.PluginClassManager.LoadAssemblies(System.String[],Concept.Utils.IMessageCollector)">
            <summary>
            Loads the assemblies.
            </summary>
            <param name="filePaths">The file paths.</param>
            <param name="messageCollector">The message collector.</param>
        </member>
        <member name="M:Concept.Model.PluginClassManager.GetDiagnosticFor(System.String)">
            <summary>
            Gets the diagnostic for.
            </summary>
            <param name="filePath">The file paht.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:Concept.Model.PluginClassManager.AllFactories">
            <summary>
            Gets the factories.
            </summary>
            <value>The factories.</value>
            <summary>
            Gets all factories.
            </summary>
            <value>All factories.</value>
        </member>
        <member name="P:Concept.Model.PluginClassManager.ConceptElementClassList">
            <summary>
            Gets the concept element class list.
            </summary>
            <value>The concept element class list.</value>
        </member>
        <member name="P:Concept.Model.PluginClassManager.AllConceptElementClassList">
            <summary>
            Gets the concept element class list, including abstract et non-visible.
            </summary>
            <value>The concept element class list.</value>
        </member>
        <member name="M:Concept.Model.PluginClassManager.GetEditControl(System.Type,System.String)">
            <summary>
            Gets the edit control.
            </summary>
            <param name="type">The type.</param>
            <param name="subject">The subject.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:Concept.Model.PluginClassManager.AddEditControl(System.Type,System.Type,System.String)">
            <summary>
            Adds the edit control with a specific subject.
            </summary>
            <param name="type">The type.</param>
            <param name="editControlType">Type of the edit control.</param>
            <param name="subject">The subject.</param>
        </member>
        <member name="M:Concept.Model.PluginClassManager.SynchronizeWithLoadedAssembly">
            <summary>
            Synchronizes the with loaded assembly.
            </summary>
        </member>
        <member name="M:Concept.Model.PluginClassManager.FilterTypes(System.Collections.Generic.IEnumerable{System.Type},System.Type)">
            <summary>
            Filters the types.
            </summary>
            <param name="types">The types.</param>
            <param name="parentType">Type of the parent.</param>
            <returns>IEnumerable{Type}.</returns>
        </member>
        <member name="M:Concept.Model.PluginClassManager.FilteredConceptElementClassList(System.Type)">
            <summary>
            Filtereds the concept element class list.
            </summary>
            <param name="parentType">Type of the parent.</param>
            <returns>IEnumerable{Type}.</returns>
        </member>
    </members>
</doc>
